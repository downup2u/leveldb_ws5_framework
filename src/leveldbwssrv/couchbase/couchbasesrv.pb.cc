// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: couchbasesrv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "couchbasesrv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace couchbasesrv {

namespace {

const ::google::protobuf::Descriptor* DBOperationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBOperationReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DBOperationReq_EnLcb_storage_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DBOperationReq_EnHttp_mothod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DBOperationReq_EnReq_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DBOperationReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBOperationReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnLcbOperation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_couchbasesrv_2eproto() {
  protobuf_AddDesc_couchbasesrv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "couchbasesrv.proto");
  GOOGLE_CHECK(file != NULL);
  DBOperationReq_descriptor_ = file->message_type(0);
  static const int DBOperationReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, enlcboperation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, dockey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, doctxt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, enlcbstorecmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, enhttpmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, enreqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, uuidstring_),
  };
  DBOperationReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBOperationReq_descriptor_,
      DBOperationReq::default_instance_,
      DBOperationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(DBOperationReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReq, _internal_metadata_),
      -1);
  DBOperationReq_EnLcb_storage_t_descriptor_ = DBOperationReq_descriptor_->enum_type(0);
  DBOperationReq_EnHttp_mothod_descriptor_ = DBOperationReq_descriptor_->enum_type(1);
  DBOperationReq_EnReq_type_descriptor_ = DBOperationReq_descriptor_->enum_type(2);
  DBOperationReply_descriptor_ = file->message_type(1);
  static const int DBOperationReply_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, enlcboperation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, issuc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, errdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, dockey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, doctxt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, httppath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, httpheaders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, httpjsonresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, uuidstring_),
  };
  DBOperationReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBOperationReply_descriptor_,
      DBOperationReply::default_instance_,
      DBOperationReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, _has_bits_[0]),
      -1,
      -1,
      sizeof(DBOperationReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBOperationReply, _internal_metadata_),
      -1);
  EnLcbOperation_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_couchbasesrv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBOperationReq_descriptor_, &DBOperationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBOperationReply_descriptor_, &DBOperationReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_couchbasesrv_2eproto() {
  delete DBOperationReq::default_instance_;
  delete DBOperationReq_reflection_;
  delete DBOperationReply::default_instance_;
  delete DBOperationReply_reflection_;
}

void protobuf_AddDesc_couchbasesrv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022couchbasesrv.proto\022\014couchbasesrv\"\322\005\n\016D"
    "BOperationReq\0224\n\016enlcboperation\030\001 \001(\0162\034."
    "couchbasesrv.EnLcbOperation\022\016\n\006dockey\030\013 "
    "\001(\t\022\016\n\006doctxt\030\014 \001(\t\022C\n\renlcbstorecmd\030\r \001"
    "(\0162,.couchbasesrv.DBOperationReq.EnLcb_s"
    "torage_t\022\014\n\004path\030\025 \001(\t\022\014\n\004body\030\026 \001(\t\022\023\n\013"
    "contenttype\030\027 \001(\t\022@\n\014enhttpmethod\030\030 \001(\0162"
    "*.couchbasesrv.DBOperationReq.EnHttp_mot"
    "hod\022:\n\tenreqtype\030\031 \001(\0162\'.couchbasesrv.DB"
    "OperationReq.EnReq_type\022\022\n\nuuidstring\030d "
    "\001(\t\"]\n\017EnLcb_storage_t\022\013\n\007LCB_ADD\020\001\022\017\n\013L"
    "CB_REPLACE\020\002\022\013\n\007LCB_SET\020\003\022\016\n\nLCB_APPEND\020"
    "\004\022\017\n\013LCB_PREPEND\020\005\"\220\001\n\rEnHttp_mothod\022\027\n\023"
    "LCB_HTTP_METHOD_GET\020\000\022\030\n\024LCB_HTTP_METHOD"
    "_POST\020\001\022\027\n\023LCB_HTTP_METHOD_PUT\020\002\022\032\n\026LCB_"
    "HTTP_METHOD_DELETE\020\003\022\027\n\023LCB_HTTP_METHOD_"
    "MAX\020\004\"p\n\nEnReq_type\022\026\n\022LCB_HTTP_TYPE_VIE"
    "W\020\000\022\034\n\030LCB_HTTP_TYPE_MANAGEMENT\020\001\022\025\n\021LCB"
    "_HTTP_TYPE_RAW\020\002\022\025\n\021LCB_HTTP_TYPE_MAX\020\003\""
    "\350\001\n\020DBOperationReply\0224\n\016enlcboperation\030\001"
    " \001(\0162\034.couchbasesrv.EnLcbOperation\022\r\n\005is"
    "suc\030\002 \001(\010\022\013\n\003err\030\003 \001(\t\022\017\n\007errdesc\030\004 \001(\t\022"
    "\016\n\006dockey\030\013 \001(\t\022\016\n\006doctxt\030\014 \001(\t\022\020\n\010httpp"
    "ath\030\025 \001(\t\022\023\n\013httpheaders\030\026 \001(\t\022\026\n\016httpjs"
    "onresult\030\027 \001(\t\022\022\n\nuuidstring\030d \001(\t*e\n\016En"
    "LcbOperation\022\r\n\tlcb_store\020\001\022\013\n\007lcb_get\020\002"
    "\022\016\n\nlcb_remove\020\003\022\023\n\017lcb_httprequest\020\004\022\022\n"
    "\016lcb_userdefine\020d", 1097);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "couchbasesrv.proto", &protobuf_RegisterTypes);
  DBOperationReq::default_instance_ = new DBOperationReq();
  DBOperationReply::default_instance_ = new DBOperationReply();
  DBOperationReq::default_instance_->InitAsDefaultInstance();
  DBOperationReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_couchbasesrv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_couchbasesrv_2eproto {
  StaticDescriptorInitializer_couchbasesrv_2eproto() {
    protobuf_AddDesc_couchbasesrv_2eproto();
  }
} static_descriptor_initializer_couchbasesrv_2eproto_;
const ::google::protobuf::EnumDescriptor* EnLcbOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnLcbOperation_descriptor_;
}
bool EnLcbOperation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* DBOperationReq_EnLcb_storage_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBOperationReq_EnLcb_storage_t_descriptor_;
}
bool DBOperationReq_EnLcb_storage_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DBOperationReq_EnLcb_storage_t DBOperationReq::LCB_ADD;
const DBOperationReq_EnLcb_storage_t DBOperationReq::LCB_REPLACE;
const DBOperationReq_EnLcb_storage_t DBOperationReq::LCB_SET;
const DBOperationReq_EnLcb_storage_t DBOperationReq::LCB_APPEND;
const DBOperationReq_EnLcb_storage_t DBOperationReq::LCB_PREPEND;
const DBOperationReq_EnLcb_storage_t DBOperationReq::EnLcb_storage_t_MIN;
const DBOperationReq_EnLcb_storage_t DBOperationReq::EnLcb_storage_t_MAX;
const int DBOperationReq::EnLcb_storage_t_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DBOperationReq_EnHttp_mothod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBOperationReq_EnHttp_mothod_descriptor_;
}
bool DBOperationReq_EnHttp_mothod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DBOperationReq_EnHttp_mothod DBOperationReq::LCB_HTTP_METHOD_GET;
const DBOperationReq_EnHttp_mothod DBOperationReq::LCB_HTTP_METHOD_POST;
const DBOperationReq_EnHttp_mothod DBOperationReq::LCB_HTTP_METHOD_PUT;
const DBOperationReq_EnHttp_mothod DBOperationReq::LCB_HTTP_METHOD_DELETE;
const DBOperationReq_EnHttp_mothod DBOperationReq::LCB_HTTP_METHOD_MAX;
const DBOperationReq_EnHttp_mothod DBOperationReq::EnHttp_mothod_MIN;
const DBOperationReq_EnHttp_mothod DBOperationReq::EnHttp_mothod_MAX;
const int DBOperationReq::EnHttp_mothod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DBOperationReq_EnReq_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBOperationReq_EnReq_type_descriptor_;
}
bool DBOperationReq_EnReq_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DBOperationReq_EnReq_type DBOperationReq::LCB_HTTP_TYPE_VIEW;
const DBOperationReq_EnReq_type DBOperationReq::LCB_HTTP_TYPE_MANAGEMENT;
const DBOperationReq_EnReq_type DBOperationReq::LCB_HTTP_TYPE_RAW;
const DBOperationReq_EnReq_type DBOperationReq::LCB_HTTP_TYPE_MAX;
const DBOperationReq_EnReq_type DBOperationReq::EnReq_type_MIN;
const DBOperationReq_EnReq_type DBOperationReq::EnReq_type_MAX;
const int DBOperationReq::EnReq_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DBOperationReq::kEnlcboperationFieldNumber;
const int DBOperationReq::kDockeyFieldNumber;
const int DBOperationReq::kDoctxtFieldNumber;
const int DBOperationReq::kEnlcbstorecmdFieldNumber;
const int DBOperationReq::kPathFieldNumber;
const int DBOperationReq::kBodyFieldNumber;
const int DBOperationReq::kContenttypeFieldNumber;
const int DBOperationReq::kEnhttpmethodFieldNumber;
const int DBOperationReq::kEnreqtypeFieldNumber;
const int DBOperationReq::kUuidstringFieldNumber;
#endif  // !_MSC_VER

DBOperationReq::DBOperationReq()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:couchbasesrv.DBOperationReq)
}

void DBOperationReq::InitAsDefaultInstance() {
}

DBOperationReq::DBOperationReq(const DBOperationReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:couchbasesrv.DBOperationReq)
}

void DBOperationReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enlcboperation_ = 1;
  dockey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doctxt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enlcbstorecmd_ = 1;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contenttype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enhttpmethod_ = 0;
  enreqtype_ = 0;
  uuidstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBOperationReq::~DBOperationReq() {
  // @@protoc_insertion_point(destructor:couchbasesrv.DBOperationReq)
  SharedDtor();
}

void DBOperationReq::SharedDtor() {
  dockey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doctxt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contenttype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuidstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DBOperationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBOperationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBOperationReq_descriptor_;
}

const DBOperationReq& DBOperationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_couchbasesrv_2eproto();
  return *default_instance_;
}

DBOperationReq* DBOperationReq::default_instance_ = NULL;

DBOperationReq* DBOperationReq::New(::google::protobuf::Arena* arena) const {
  DBOperationReq* n = new DBOperationReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBOperationReq::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    enlcboperation_ = 1;
    if (has_dockey()) {
      dockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_doctxt()) {
      doctxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    enlcbstorecmd_ = 1;
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_body()) {
      body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contenttype()) {
      contenttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    enhttpmethod_ = 0;
  }
  if (_has_bits_[8 / 32] & 768) {
    enreqtype_ = 0;
    if (has_uuidstring()) {
      uuidstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DBOperationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:couchbasesrv.DBOperationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::couchbasesrv::EnLcbOperation_IsValid(value)) {
            set_enlcboperation(static_cast< ::couchbasesrv::EnLcbOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_dockey;
        break;
      }

      // optional string dockey = 11;
      case 11: {
        if (tag == 90) {
         parse_dockey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dockey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dockey().data(), this->dockey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReq.dockey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_doctxt;
        break;
      }

      // optional string doctxt = 12;
      case 12: {
        if (tag == 98) {
         parse_doctxt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doctxt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->doctxt().data(), this->doctxt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReq.doctxt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_enlcbstorecmd;
        break;
      }

      // optional .couchbasesrv.DBOperationReq.EnLcb_storage_t enlcbstorecmd = 13;
      case 13: {
        if (tag == 104) {
         parse_enlcbstorecmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::couchbasesrv::DBOperationReq_EnLcb_storage_t_IsValid(value)) {
            set_enlcbstorecmd(static_cast< ::couchbasesrv::DBOperationReq_EnLcb_storage_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_path;
        break;
      }

      // optional string path = 21;
      case 21: {
        if (tag == 170) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReq.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_body;
        break;
      }

      // optional string body = 22;
      case 22: {
        if (tag == 178) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReq.body");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_contenttype;
        break;
      }

      // optional string contenttype = 23;
      case 23: {
        if (tag == 186) {
         parse_contenttype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contenttype().data(), this->contenttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReq.contenttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_enhttpmethod;
        break;
      }

      // optional .couchbasesrv.DBOperationReq.EnHttp_mothod enhttpmethod = 24;
      case 24: {
        if (tag == 192) {
         parse_enhttpmethod:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::couchbasesrv::DBOperationReq_EnHttp_mothod_IsValid(value)) {
            set_enhttpmethod(static_cast< ::couchbasesrv::DBOperationReq_EnHttp_mothod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_enreqtype;
        break;
      }

      // optional .couchbasesrv.DBOperationReq.EnReq_type enreqtype = 25;
      case 25: {
        if (tag == 200) {
         parse_enreqtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::couchbasesrv::DBOperationReq_EnReq_type_IsValid(value)) {
            set_enreqtype(static_cast< ::couchbasesrv::DBOperationReq_EnReq_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_uuidstring;
        break;
      }

      // optional string uuidstring = 100;
      case 100: {
        if (tag == 802) {
         parse_uuidstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuidstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuidstring().data(), this->uuidstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReq.uuidstring");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:couchbasesrv.DBOperationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:couchbasesrv.DBOperationReq)
  return false;
#undef DO_
}

void DBOperationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:couchbasesrv.DBOperationReq)
  // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
  if (has_enlcboperation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->enlcboperation(), output);
  }

  // optional string dockey = 11;
  if (has_dockey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dockey().data(), this->dockey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.dockey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dockey(), output);
  }

  // optional string doctxt = 12;
  if (has_doctxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doctxt().data(), this->doctxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.doctxt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->doctxt(), output);
  }

  // optional .couchbasesrv.DBOperationReq.EnLcb_storage_t enlcbstorecmd = 13;
  if (has_enlcbstorecmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->enlcbstorecmd(), output);
  }

  // optional string path = 21;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->path(), output);
  }

  // optional string body = 22;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->body(), output);
  }

  // optional string contenttype = 23;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.contenttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->contenttype(), output);
  }

  // optional .couchbasesrv.DBOperationReq.EnHttp_mothod enhttpmethod = 24;
  if (has_enhttpmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->enhttpmethod(), output);
  }

  // optional .couchbasesrv.DBOperationReq.EnReq_type enreqtype = 25;
  if (has_enreqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->enreqtype(), output);
  }

  // optional string uuidstring = 100;
  if (has_uuidstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidstring().data(), this->uuidstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.uuidstring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->uuidstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:couchbasesrv.DBOperationReq)
}

::google::protobuf::uint8* DBOperationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:couchbasesrv.DBOperationReq)
  // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
  if (has_enlcboperation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->enlcboperation(), target);
  }

  // optional string dockey = 11;
  if (has_dockey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dockey().data(), this->dockey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.dockey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dockey(), target);
  }

  // optional string doctxt = 12;
  if (has_doctxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doctxt().data(), this->doctxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.doctxt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->doctxt(), target);
  }

  // optional .couchbasesrv.DBOperationReq.EnLcb_storage_t enlcbstorecmd = 13;
  if (has_enlcbstorecmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->enlcbstorecmd(), target);
  }

  // optional string path = 21;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->path(), target);
  }

  // optional string body = 22;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->body(), target);
  }

  // optional string contenttype = 23;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.contenttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->contenttype(), target);
  }

  // optional .couchbasesrv.DBOperationReq.EnHttp_mothod enhttpmethod = 24;
  if (has_enhttpmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->enhttpmethod(), target);
  }

  // optional .couchbasesrv.DBOperationReq.EnReq_type enreqtype = 25;
  if (has_enreqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->enreqtype(), target);
  }

  // optional string uuidstring = 100;
  if (has_uuidstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidstring().data(), this->uuidstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReq.uuidstring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->uuidstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:couchbasesrv.DBOperationReq)
  return target;
}

int DBOperationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
    if (has_enlcboperation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->enlcboperation());
    }

    // optional string dockey = 11;
    if (has_dockey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dockey());
    }

    // optional string doctxt = 12;
    if (has_doctxt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doctxt());
    }

    // optional .couchbasesrv.DBOperationReq.EnLcb_storage_t enlcbstorecmd = 13;
    if (has_enlcbstorecmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->enlcbstorecmd());
    }

    // optional string path = 21;
    if (has_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string body = 22;
    if (has_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional string contenttype = 23;
    if (has_contenttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttype());
    }

    // optional .couchbasesrv.DBOperationReq.EnHttp_mothod enhttpmethod = 24;
    if (has_enhttpmethod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->enhttpmethod());
    }

  }
  if (_has_bits_[8 / 32] & 768) {
    // optional .couchbasesrv.DBOperationReq.EnReq_type enreqtype = 25;
    if (has_enreqtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->enreqtype());
    }

    // optional string uuidstring = 100;
    if (has_uuidstring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuidstring());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBOperationReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBOperationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBOperationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBOperationReq::MergeFrom(const DBOperationReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enlcboperation()) {
      set_enlcboperation(from.enlcboperation());
    }
    if (from.has_dockey()) {
      set_has_dockey();
      dockey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dockey_);
    }
    if (from.has_doctxt()) {
      set_has_doctxt();
      doctxt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doctxt_);
    }
    if (from.has_enlcbstorecmd()) {
      set_enlcbstorecmd(from.enlcbstorecmd());
    }
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_body()) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (from.has_contenttype()) {
      set_has_contenttype();
      contenttype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contenttype_);
    }
    if (from.has_enhttpmethod()) {
      set_enhttpmethod(from.enhttpmethod());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enreqtype()) {
      set_enreqtype(from.enreqtype());
    }
    if (from.has_uuidstring()) {
      set_has_uuidstring();
      uuidstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuidstring_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DBOperationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBOperationReq::CopyFrom(const DBOperationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBOperationReq::IsInitialized() const {

  return true;
}

void DBOperationReq::Swap(DBOperationReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBOperationReq::InternalSwap(DBOperationReq* other) {
  std::swap(enlcboperation_, other->enlcboperation_);
  dockey_.Swap(&other->dockey_);
  doctxt_.Swap(&other->doctxt_);
  std::swap(enlcbstorecmd_, other->enlcbstorecmd_);
  path_.Swap(&other->path_);
  body_.Swap(&other->body_);
  contenttype_.Swap(&other->contenttype_);
  std::swap(enhttpmethod_, other->enhttpmethod_);
  std::swap(enreqtype_, other->enreqtype_);
  uuidstring_.Swap(&other->uuidstring_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBOperationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBOperationReq_descriptor_;
  metadata.reflection = DBOperationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBOperationReply::kEnlcboperationFieldNumber;
const int DBOperationReply::kIssucFieldNumber;
const int DBOperationReply::kErrFieldNumber;
const int DBOperationReply::kErrdescFieldNumber;
const int DBOperationReply::kDockeyFieldNumber;
const int DBOperationReply::kDoctxtFieldNumber;
const int DBOperationReply::kHttppathFieldNumber;
const int DBOperationReply::kHttpheadersFieldNumber;
const int DBOperationReply::kHttpjsonresultFieldNumber;
const int DBOperationReply::kUuidstringFieldNumber;
#endif  // !_MSC_VER

DBOperationReply::DBOperationReply()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:couchbasesrv.DBOperationReply)
}

void DBOperationReply::InitAsDefaultInstance() {
}

DBOperationReply::DBOperationReply(const DBOperationReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:couchbasesrv.DBOperationReply)
}

void DBOperationReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enlcboperation_ = 1;
  issuc_ = false;
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dockey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doctxt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  httppath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  httpheaders_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  httpjsonresult_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuidstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBOperationReply::~DBOperationReply() {
  // @@protoc_insertion_point(destructor:couchbasesrv.DBOperationReply)
  SharedDtor();
}

void DBOperationReply::SharedDtor() {
  err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dockey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  doctxt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  httppath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  httpheaders_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  httpjsonresult_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuidstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DBOperationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBOperationReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBOperationReply_descriptor_;
}

const DBOperationReply& DBOperationReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_couchbasesrv_2eproto();
  return *default_instance_;
}

DBOperationReply* DBOperationReply::default_instance_ = NULL;

DBOperationReply* DBOperationReply::New(::google::protobuf::Arena* arena) const {
  DBOperationReply* n = new DBOperationReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBOperationReply::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    enlcboperation_ = 1;
    issuc_ = false;
    if (has_err()) {
      err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_errdesc()) {
      errdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dockey()) {
      dockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_doctxt()) {
      doctxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_httppath()) {
      httppath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_httpheaders()) {
      httpheaders_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_httpjsonresult()) {
      httpjsonresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uuidstring()) {
      uuidstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DBOperationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:couchbasesrv.DBOperationReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::couchbasesrv::EnLcbOperation_IsValid(value)) {
            set_enlcboperation(static_cast< ::couchbasesrv::EnLcbOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_issuc;
        break;
      }

      // optional bool issuc = 2;
      case 2: {
        if (tag == 16) {
         parse_issuc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuc_)));
          set_has_issuc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }

      // optional string err = 3;
      case 3: {
        if (tag == 26) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReply.err");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_errdesc;
        break;
      }

      // optional string errdesc = 4;
      case 4: {
        if (tag == 34) {
         parse_errdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errdesc().data(), this->errdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReply.errdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_dockey;
        break;
      }

      // optional string dockey = 11;
      case 11: {
        if (tag == 90) {
         parse_dockey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dockey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dockey().data(), this->dockey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReply.dockey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_doctxt;
        break;
      }

      // optional string doctxt = 12;
      case 12: {
        if (tag == 98) {
         parse_doctxt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doctxt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->doctxt().data(), this->doctxt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReply.doctxt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_httppath;
        break;
      }

      // optional string httppath = 21;
      case 21: {
        if (tag == 170) {
         parse_httppath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_httppath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->httppath().data(), this->httppath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReply.httppath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_httpheaders;
        break;
      }

      // optional string httpheaders = 22;
      case 22: {
        if (tag == 178) {
         parse_httpheaders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_httpheaders()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->httpheaders().data(), this->httpheaders().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReply.httpheaders");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_httpjsonresult;
        break;
      }

      // optional string httpjsonresult = 23;
      case 23: {
        if (tag == 186) {
         parse_httpjsonresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_httpjsonresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->httpjsonresult().data(), this->httpjsonresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReply.httpjsonresult");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_uuidstring;
        break;
      }

      // optional string uuidstring = 100;
      case 100: {
        if (tag == 802) {
         parse_uuidstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuidstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuidstring().data(), this->uuidstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "couchbasesrv.DBOperationReply.uuidstring");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:couchbasesrv.DBOperationReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:couchbasesrv.DBOperationReply)
  return false;
#undef DO_
}

void DBOperationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:couchbasesrv.DBOperationReply)
  // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
  if (has_enlcboperation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->enlcboperation(), output);
  }

  // optional bool issuc = 2;
  if (has_issuc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issuc(), output);
  }

  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->err(), output);
  }

  // optional string errdesc = 4;
  if (has_errdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errdesc().data(), this->errdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.errdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->errdesc(), output);
  }

  // optional string dockey = 11;
  if (has_dockey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dockey().data(), this->dockey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.dockey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dockey(), output);
  }

  // optional string doctxt = 12;
  if (has_doctxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doctxt().data(), this->doctxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.doctxt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->doctxt(), output);
  }

  // optional string httppath = 21;
  if (has_httppath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->httppath().data(), this->httppath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.httppath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->httppath(), output);
  }

  // optional string httpheaders = 22;
  if (has_httpheaders()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->httpheaders().data(), this->httpheaders().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.httpheaders");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->httpheaders(), output);
  }

  // optional string httpjsonresult = 23;
  if (has_httpjsonresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->httpjsonresult().data(), this->httpjsonresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.httpjsonresult");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->httpjsonresult(), output);
  }

  // optional string uuidstring = 100;
  if (has_uuidstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidstring().data(), this->uuidstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.uuidstring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->uuidstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:couchbasesrv.DBOperationReply)
}

::google::protobuf::uint8* DBOperationReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:couchbasesrv.DBOperationReply)
  // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
  if (has_enlcboperation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->enlcboperation(), target);
  }

  // optional bool issuc = 2;
  if (has_issuc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issuc(), target);
  }

  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err(), target);
  }

  // optional string errdesc = 4;
  if (has_errdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errdesc().data(), this->errdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.errdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->errdesc(), target);
  }

  // optional string dockey = 11;
  if (has_dockey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dockey().data(), this->dockey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.dockey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dockey(), target);
  }

  // optional string doctxt = 12;
  if (has_doctxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doctxt().data(), this->doctxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.doctxt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->doctxt(), target);
  }

  // optional string httppath = 21;
  if (has_httppath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->httppath().data(), this->httppath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.httppath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->httppath(), target);
  }

  // optional string httpheaders = 22;
  if (has_httpheaders()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->httpheaders().data(), this->httpheaders().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.httpheaders");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->httpheaders(), target);
  }

  // optional string httpjsonresult = 23;
  if (has_httpjsonresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->httpjsonresult().data(), this->httpjsonresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.httpjsonresult");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->httpjsonresult(), target);
  }

  // optional string uuidstring = 100;
  if (has_uuidstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidstring().data(), this->uuidstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "couchbasesrv.DBOperationReply.uuidstring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->uuidstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:couchbasesrv.DBOperationReply)
  return target;
}

int DBOperationReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
    if (has_enlcboperation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->enlcboperation());
    }

    // optional bool issuc = 2;
    if (has_issuc()) {
      total_size += 1 + 1;
    }

    // optional string err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

    // optional string errdesc = 4;
    if (has_errdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errdesc());
    }

    // optional string dockey = 11;
    if (has_dockey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dockey());
    }

    // optional string doctxt = 12;
    if (has_doctxt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doctxt());
    }

    // optional string httppath = 21;
    if (has_httppath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->httppath());
    }

    // optional string httpheaders = 22;
    if (has_httpheaders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->httpheaders());
    }

  }
  if (_has_bits_[8 / 32] & 768) {
    // optional string httpjsonresult = 23;
    if (has_httpjsonresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->httpjsonresult());
    }

    // optional string uuidstring = 100;
    if (has_uuidstring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuidstring());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBOperationReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DBOperationReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBOperationReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBOperationReply::MergeFrom(const DBOperationReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enlcboperation()) {
      set_enlcboperation(from.enlcboperation());
    }
    if (from.has_issuc()) {
      set_issuc(from.issuc());
    }
    if (from.has_err()) {
      set_has_err();
      err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
    }
    if (from.has_errdesc()) {
      set_has_errdesc();
      errdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errdesc_);
    }
    if (from.has_dockey()) {
      set_has_dockey();
      dockey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dockey_);
    }
    if (from.has_doctxt()) {
      set_has_doctxt();
      doctxt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doctxt_);
    }
    if (from.has_httppath()) {
      set_has_httppath();
      httppath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.httppath_);
    }
    if (from.has_httpheaders()) {
      set_has_httpheaders();
      httpheaders_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.httpheaders_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_httpjsonresult()) {
      set_has_httpjsonresult();
      httpjsonresult_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.httpjsonresult_);
    }
    if (from.has_uuidstring()) {
      set_has_uuidstring();
      uuidstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuidstring_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DBOperationReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBOperationReply::CopyFrom(const DBOperationReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBOperationReply::IsInitialized() const {

  return true;
}

void DBOperationReply::Swap(DBOperationReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBOperationReply::InternalSwap(DBOperationReply* other) {
  std::swap(enlcboperation_, other->enlcboperation_);
  std::swap(issuc_, other->issuc_);
  err_.Swap(&other->err_);
  errdesc_.Swap(&other->errdesc_);
  dockey_.Swap(&other->dockey_);
  doctxt_.Swap(&other->doctxt_);
  httppath_.Swap(&other->httppath_);
  httpheaders_.Swap(&other->httpheaders_);
  httpjsonresult_.Swap(&other->httpjsonresult_);
  uuidstring_.Swap(&other->uuidstring_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBOperationReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBOperationReply_descriptor_;
  metadata.reflection = DBOperationReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace couchbasesrv

// @@protoc_insertion_point(global_scope)
