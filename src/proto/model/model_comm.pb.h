// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_comm.proto

#ifndef PROTOBUF_model_5fcomm_2eproto__INCLUDED
#define PROTOBUF_model_5fcomm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "model_db.pb.h"
// @@protoc_insertion_point(includes)

namespace sample_projectname {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_model_5fcomm_2eproto();
void protobuf_AssignDesc_model_5fcomm_2eproto();
void protobuf_ShutdownFile_model_5fcomm_2eproto();

class PkgUserLoginReq;
class PkgUserLoginReply;
class PkgOptTable1Req;
class PkgOptTable1Reply;
class PkgOptTable2Req;
class PkgOptTable2Reply;
class PkgQueryCondition;
class PkgPageQueryTable1Req;
class PkgPageQueryTable1Reply;

enum EnGetType {
  GT_PHONE = 0,
  GT_EMAIL = 1,
  GT_USERID = 2,
  GT_USERNAME = 3
};
bool EnGetType_IsValid(int value);
const EnGetType EnGetType_MIN = GT_PHONE;
const EnGetType EnGetType_MAX = GT_USERNAME;
const int EnGetType_ARRAYSIZE = EnGetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnGetType_descriptor();
inline const ::std::string& EnGetType_Name(EnGetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnGetType_descriptor(), value);
}
inline bool EnGetType_Parse(
    const ::std::string& name, EnGetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnGetType>(
    EnGetType_descriptor(), name, value);
}
enum EnOperation {
  TO_INSERT = 1,
  TO_UPDATE = 16,
  TO_DELETE = 64
};
bool EnOperation_IsValid(int value);
const EnOperation EnOperation_MIN = TO_INSERT;
const EnOperation EnOperation_MAX = TO_DELETE;
const int EnOperation_ARRAYSIZE = EnOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnOperation_descriptor();
inline const ::std::string& EnOperation_Name(EnOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnOperation_descriptor(), value);
}
inline bool EnOperation_Parse(
    const ::std::string& name, EnOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnOperation>(
    EnOperation_descriptor(), name, value);
}
enum EnQueryCondition {
  TQC_DATESTART = 1,
  TQC_DATEEND = 2,
  TQC_KEYFORNAME = 4,
  TQC_KEYFORCONTENT = 8,
  TQC_KEYFIELDUUID = 16
};
bool EnQueryCondition_IsValid(int value);
const EnQueryCondition EnQueryCondition_MIN = TQC_DATESTART;
const EnQueryCondition EnQueryCondition_MAX = TQC_KEYFIELDUUID;
const int EnQueryCondition_ARRAYSIZE = EnQueryCondition_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnQueryCondition_descriptor();
inline const ::std::string& EnQueryCondition_Name(EnQueryCondition value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnQueryCondition_descriptor(), value);
}
inline bool EnQueryCondition_Parse(
    const ::std::string& name, EnQueryCondition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnQueryCondition>(
    EnQueryCondition_descriptor(), name, value);
}
enum EnPageFlag {
  P_ONLYNUM = 1,
  P_RETURNALL = 2,
  P_RETURNPAGE = 3
};
bool EnPageFlag_IsValid(int value);
const EnPageFlag EnPageFlag_MIN = P_ONLYNUM;
const EnPageFlag EnPageFlag_MAX = P_RETURNPAGE;
const int EnPageFlag_ARRAYSIZE = EnPageFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnPageFlag_descriptor();
inline const ::std::string& EnPageFlag_Name(EnPageFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnPageFlag_descriptor(), value);
}
inline bool EnPageFlag_Parse(
    const ::std::string& name, EnPageFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnPageFlag>(
    EnPageFlag_descriptor(), name, value);
}
// ===================================================================

class PkgUserLoginReq : public ::google::protobuf::Message {
 public:
  PkgUserLoginReq();
  virtual ~PkgUserLoginReq();

  PkgUserLoginReq(const PkgUserLoginReq& from);

  inline PkgUserLoginReq& operator=(const PkgUserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgUserLoginReq& default_instance();

  void Swap(PkgUserLoginReq* other);

  // implements Message ----------------------------------------------

  inline PkgUserLoginReq* New() const { return New(NULL); }

  PkgUserLoginReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgUserLoginReq& from);
  void MergeFrom(const PkgUserLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgUserLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sample_projectname.EnGetType gettype = 1 [default = GT_PHONE];
  inline bool has_gettype() const;
  inline void clear_gettype();
  static const int kGettypeFieldNumber = 1;
  inline ::sample_projectname::EnGetType gettype() const;
  inline void set_gettype(::sample_projectname::EnGetType value);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string phonenumber = 3;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhonenumberFieldNumber = 3;
  inline const ::std::string& phonenumber() const;
  inline void set_phonenumber(const ::std::string& value);
  inline void set_phonenumber(const char* value);
  inline void set_phonenumber(const char* value, size_t size);
  inline ::std::string* mutable_phonenumber();
  inline ::std::string* release_phonenumber();
  inline void set_allocated_phonenumber(::std::string* phonenumber);

  // optional string emailaddress = 4;
  inline bool has_emailaddress() const;
  inline void clear_emailaddress();
  static const int kEmailaddressFieldNumber = 4;
  inline const ::std::string& emailaddress() const;
  inline void set_emailaddress(const ::std::string& value);
  inline void set_emailaddress(const char* value);
  inline void set_emailaddress(const char* value, size_t size);
  inline ::std::string* mutable_emailaddress();
  inline ::std::string* release_emailaddress();
  inline void set_allocated_emailaddress(::std::string* emailaddress);

  // optional string username = 5;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 5;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 10;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 10;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string hashedserversn = 100;
  inline bool has_hashedserversn() const;
  inline void clear_hashedserversn();
  static const int kHashedserversnFieldNumber = 100;
  inline const ::std::string& hashedserversn() const;
  inline void set_hashedserversn(const ::std::string& value);
  inline void set_hashedserversn(const char* value);
  inline void set_hashedserversn(const char* value, size_t size);
  inline ::std::string* mutable_hashedserversn();
  inline ::std::string* release_hashedserversn();
  inline void set_allocated_hashedserversn(::std::string* hashedserversn);

  // @@protoc_insertion_point(class_scope:sample_projectname.PkgUserLoginReq)
 private:
  inline void set_has_gettype();
  inline void clear_has_gettype();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_emailaddress();
  inline void clear_has_emailaddress();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_hashedserversn();
  inline void clear_has_hashedserversn();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int gettype_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::internal::ArenaStringPtr phonenumber_;
  ::google::protobuf::internal::ArenaStringPtr emailaddress_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr hashedserversn_;
  friend void  protobuf_AddDesc_model_5fcomm_2eproto();
  friend void protobuf_AssignDesc_model_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_model_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static PkgUserLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class PkgUserLoginReply : public ::google::protobuf::Message {
 public:
  PkgUserLoginReply();
  virtual ~PkgUserLoginReply();

  PkgUserLoginReply(const PkgUserLoginReply& from);

  inline PkgUserLoginReply& operator=(const PkgUserLoginReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgUserLoginReply& default_instance();

  void Swap(PkgUserLoginReply* other);

  // implements Message ----------------------------------------------

  inline PkgUserLoginReply* New() const { return New(NULL); }

  PkgUserLoginReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgUserLoginReply& from);
  void MergeFrom(const PkgUserLoginReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgUserLoginReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1 [default = true];
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:sample_projectname.PkgUserLoginReply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  bool issuccess_;
  friend void  protobuf_AddDesc_model_5fcomm_2eproto();
  friend void protobuf_AssignDesc_model_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_model_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static PkgUserLoginReply* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptTable1Req : public ::google::protobuf::Message {
 public:
  PkgOptTable1Req();
  virtual ~PkgOptTable1Req();

  PkgOptTable1Req(const PkgOptTable1Req& from);

  inline PkgOptTable1Req& operator=(const PkgOptTable1Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptTable1Req& default_instance();

  void Swap(PkgOptTable1Req* other);

  // implements Message ----------------------------------------------

  inline PkgOptTable1Req* New() const { return New(NULL); }

  PkgOptTable1Req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptTable1Req& from);
  void MergeFrom(const PkgOptTable1Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptTable1Req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sample_projectname.EnOperation opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::sample_projectname::EnOperation opt() const;
  inline void set_opt(::sample_projectname::EnOperation value);

  // optional .sample_projectname.db_table1 table1 = 2;
  inline bool has_table1() const;
  inline void clear_table1();
  static const int kTable1FieldNumber = 2;
  inline const ::sample_projectname::db_table1& table1() const;
  inline ::sample_projectname::db_table1* mutable_table1();
  inline ::sample_projectname::db_table1* release_table1();
  inline void set_allocated_table1(::sample_projectname::db_table1* table1);

  // optional string fieldid = 3;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldidFieldNumber = 3;
  inline const ::std::string& fieldid() const;
  inline void set_fieldid(const ::std::string& value);
  inline void set_fieldid(const char* value);
  inline void set_fieldid(const char* value, size_t size);
  inline ::std::string* mutable_fieldid();
  inline ::std::string* release_fieldid();
  inline void set_allocated_fieldid(::std::string* fieldid);

  // @@protoc_insertion_point(class_scope:sample_projectname.PkgOptTable1Req)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_table1();
  inline void clear_has_table1();
  inline void set_has_fieldid();
  inline void clear_has_fieldid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::sample_projectname::db_table1* table1_;
  ::google::protobuf::internal::ArenaStringPtr fieldid_;
  int opt_;
  friend void  protobuf_AddDesc_model_5fcomm_2eproto();
  friend void protobuf_AssignDesc_model_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_model_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptTable1Req* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptTable1Reply : public ::google::protobuf::Message {
 public:
  PkgOptTable1Reply();
  virtual ~PkgOptTable1Reply();

  PkgOptTable1Reply(const PkgOptTable1Reply& from);

  inline PkgOptTable1Reply& operator=(const PkgOptTable1Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptTable1Reply& default_instance();

  void Swap(PkgOptTable1Reply* other);

  // implements Message ----------------------------------------------

  inline PkgOptTable1Reply* New() const { return New(NULL); }

  PkgOptTable1Reply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptTable1Reply& from);
  void MergeFrom(const PkgOptTable1Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptTable1Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:sample_projectname.PkgOptTable1Reply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  bool issuccess_;
  friend void  protobuf_AddDesc_model_5fcomm_2eproto();
  friend void protobuf_AssignDesc_model_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_model_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptTable1Reply* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptTable2Req : public ::google::protobuf::Message {
 public:
  PkgOptTable2Req();
  virtual ~PkgOptTable2Req();

  PkgOptTable2Req(const PkgOptTable2Req& from);

  inline PkgOptTable2Req& operator=(const PkgOptTable2Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptTable2Req& default_instance();

  void Swap(PkgOptTable2Req* other);

  // implements Message ----------------------------------------------

  inline PkgOptTable2Req* New() const { return New(NULL); }

  PkgOptTable2Req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptTable2Req& from);
  void MergeFrom(const PkgOptTable2Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptTable2Req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sample_projectname.EnOperation opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::sample_projectname::EnOperation opt() const;
  inline void set_opt(::sample_projectname::EnOperation value);

  // optional .sample_projectname.db_table1 table2 = 2;
  inline bool has_table2() const;
  inline void clear_table2();
  static const int kTable2FieldNumber = 2;
  inline const ::sample_projectname::db_table1& table2() const;
  inline ::sample_projectname::db_table1* mutable_table2();
  inline ::sample_projectname::db_table1* release_table2();
  inline void set_allocated_table2(::sample_projectname::db_table1* table2);

  // optional string fieldid = 3;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldidFieldNumber = 3;
  inline const ::std::string& fieldid() const;
  inline void set_fieldid(const ::std::string& value);
  inline void set_fieldid(const char* value);
  inline void set_fieldid(const char* value, size_t size);
  inline ::std::string* mutable_fieldid();
  inline ::std::string* release_fieldid();
  inline void set_allocated_fieldid(::std::string* fieldid);

  // @@protoc_insertion_point(class_scope:sample_projectname.PkgOptTable2Req)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_table2();
  inline void clear_has_table2();
  inline void set_has_fieldid();
  inline void clear_has_fieldid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::sample_projectname::db_table1* table2_;
  ::google::protobuf::internal::ArenaStringPtr fieldid_;
  int opt_;
  friend void  protobuf_AddDesc_model_5fcomm_2eproto();
  friend void protobuf_AssignDesc_model_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_model_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptTable2Req* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptTable2Reply : public ::google::protobuf::Message {
 public:
  PkgOptTable2Reply();
  virtual ~PkgOptTable2Reply();

  PkgOptTable2Reply(const PkgOptTable2Reply& from);

  inline PkgOptTable2Reply& operator=(const PkgOptTable2Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptTable2Reply& default_instance();

  void Swap(PkgOptTable2Reply* other);

  // implements Message ----------------------------------------------

  inline PkgOptTable2Reply* New() const { return New(NULL); }

  PkgOptTable2Reply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptTable2Reply& from);
  void MergeFrom(const PkgOptTable2Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptTable2Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:sample_projectname.PkgOptTable2Reply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  bool issuccess_;
  friend void  protobuf_AddDesc_model_5fcomm_2eproto();
  friend void protobuf_AssignDesc_model_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_model_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptTable2Reply* default_instance_;
};
// -------------------------------------------------------------------

class PkgQueryCondition : public ::google::protobuf::Message {
 public:
  PkgQueryCondition();
  virtual ~PkgQueryCondition();

  PkgQueryCondition(const PkgQueryCondition& from);

  inline PkgQueryCondition& operator=(const PkgQueryCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgQueryCondition& default_instance();

  void Swap(PkgQueryCondition* other);

  // implements Message ----------------------------------------------

  inline PkgQueryCondition* New() const { return New(NULL); }

  PkgQueryCondition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgQueryCondition& from);
  void MergeFrom(const PkgQueryCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgQueryCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string taskdatestart = 2;
  inline bool has_taskdatestart() const;
  inline void clear_taskdatestart();
  static const int kTaskdatestartFieldNumber = 2;
  inline const ::std::string& taskdatestart() const;
  inline void set_taskdatestart(const ::std::string& value);
  inline void set_taskdatestart(const char* value);
  inline void set_taskdatestart(const char* value, size_t size);
  inline ::std::string* mutable_taskdatestart();
  inline ::std::string* release_taskdatestart();
  inline void set_allocated_taskdatestart(::std::string* taskdatestart);

  // optional string taskdateend = 3;
  inline bool has_taskdateend() const;
  inline void clear_taskdateend();
  static const int kTaskdateendFieldNumber = 3;
  inline const ::std::string& taskdateend() const;
  inline void set_taskdateend(const ::std::string& value);
  inline void set_taskdateend(const char* value);
  inline void set_taskdateend(const char* value, size_t size);
  inline ::std::string* mutable_taskdateend();
  inline ::std::string* release_taskdateend();
  inline void set_allocated_taskdateend(::std::string* taskdateend);

  // optional string keyforname = 4;
  inline bool has_keyforname() const;
  inline void clear_keyforname();
  static const int kKeyfornameFieldNumber = 4;
  inline const ::std::string& keyforname() const;
  inline void set_keyforname(const ::std::string& value);
  inline void set_keyforname(const char* value);
  inline void set_keyforname(const char* value, size_t size);
  inline ::std::string* mutable_keyforname();
  inline ::std::string* release_keyforname();
  inline void set_allocated_keyforname(::std::string* keyforname);

  // optional string keyforcontent = 5;
  inline bool has_keyforcontent() const;
  inline void clear_keyforcontent();
  static const int kKeyforcontentFieldNumber = 5;
  inline const ::std::string& keyforcontent() const;
  inline void set_keyforcontent(const ::std::string& value);
  inline void set_keyforcontent(const char* value);
  inline void set_keyforcontent(const char* value, size_t size);
  inline ::std::string* mutable_keyforcontent();
  inline ::std::string* release_keyforcontent();
  inline void set_allocated_keyforcontent(::std::string* keyforcontent);

  // optional string keyfielduuid = 10;
  inline bool has_keyfielduuid() const;
  inline void clear_keyfielduuid();
  static const int kKeyfielduuidFieldNumber = 10;
  inline const ::std::string& keyfielduuid() const;
  inline void set_keyfielduuid(const ::std::string& value);
  inline void set_keyfielduuid(const char* value);
  inline void set_keyfielduuid(const char* value, size_t size);
  inline ::std::string* mutable_keyfielduuid();
  inline ::std::string* release_keyfielduuid();
  inline void set_allocated_keyfielduuid(::std::string* keyfielduuid);

  // @@protoc_insertion_point(class_scope:sample_projectname.PkgQueryCondition)
 private:
  inline void set_has_taskdatestart();
  inline void clear_has_taskdatestart();
  inline void set_has_taskdateend();
  inline void clear_has_taskdateend();
  inline void set_has_keyforname();
  inline void clear_has_keyforname();
  inline void set_has_keyforcontent();
  inline void clear_has_keyforcontent();
  inline void set_has_keyfielduuid();
  inline void clear_has_keyfielduuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr taskdatestart_;
  ::google::protobuf::internal::ArenaStringPtr taskdateend_;
  ::google::protobuf::internal::ArenaStringPtr keyforname_;
  ::google::protobuf::internal::ArenaStringPtr keyforcontent_;
  ::google::protobuf::internal::ArenaStringPtr keyfielduuid_;
  friend void  protobuf_AddDesc_model_5fcomm_2eproto();
  friend void protobuf_AssignDesc_model_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_model_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static PkgQueryCondition* default_instance_;
};
// -------------------------------------------------------------------

class PkgPageQueryTable1Req : public ::google::protobuf::Message {
 public:
  PkgPageQueryTable1Req();
  virtual ~PkgPageQueryTable1Req();

  PkgPageQueryTable1Req(const PkgPageQueryTable1Req& from);

  inline PkgPageQueryTable1Req& operator=(const PkgPageQueryTable1Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgPageQueryTable1Req& default_instance();

  void Swap(PkgPageQueryTable1Req* other);

  // implements Message ----------------------------------------------

  inline PkgPageQueryTable1Req* New() const { return New(NULL); }

  PkgPageQueryTable1Req* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgPageQueryTable1Req& from);
  void MergeFrom(const PkgPageQueryTable1Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgPageQueryTable1Req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 enconditon = 2 [default = 0];
  inline bool has_enconditon() const;
  inline void clear_enconditon();
  static const int kEnconditonFieldNumber = 2;
  inline ::google::protobuf::int32 enconditon() const;
  inline void set_enconditon(::google::protobuf::int32 value);

  // optional .sample_projectname.PkgQueryCondition pkgquerycondition = 3;
  inline bool has_pkgquerycondition() const;
  inline void clear_pkgquerycondition();
  static const int kPkgqueryconditionFieldNumber = 3;
  inline const ::sample_projectname::PkgQueryCondition& pkgquerycondition() const;
  inline ::sample_projectname::PkgQueryCondition* mutable_pkgquerycondition();
  inline ::sample_projectname::PkgQueryCondition* release_pkgquerycondition();
  inline void set_allocated_pkgquerycondition(::sample_projectname::PkgQueryCondition* pkgquerycondition);

  // optional .sample_projectname.EnPageFlag pageflag = 4 [default = P_RETURNALL];
  inline bool has_pageflag() const;
  inline void clear_pageflag();
  static const int kPageflagFieldNumber = 4;
  inline ::sample_projectname::EnPageFlag pageflag() const;
  inline void set_pageflag(::sample_projectname::EnPageFlag value);

  // optional int32 indexstart = 5;
  inline bool has_indexstart() const;
  inline void clear_indexstart();
  static const int kIndexstartFieldNumber = 5;
  inline ::google::protobuf::int32 indexstart() const;
  inline void set_indexstart(::google::protobuf::int32 value);

  // optional int32 indexend = 6;
  inline bool has_indexend() const;
  inline void clear_indexend();
  static const int kIndexendFieldNumber = 6;
  inline ::google::protobuf::int32 indexend() const;
  inline void set_indexend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sample_projectname.PkgPageQueryTable1Req)
 private:
  inline void set_has_enconditon();
  inline void clear_has_enconditon();
  inline void set_has_pkgquerycondition();
  inline void clear_has_pkgquerycondition();
  inline void set_has_pageflag();
  inline void clear_has_pageflag();
  inline void set_has_indexstart();
  inline void clear_has_indexstart();
  inline void set_has_indexend();
  inline void clear_has_indexend();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::sample_projectname::PkgQueryCondition* pkgquerycondition_;
  ::google::protobuf::int32 enconditon_;
  int pageflag_;
  ::google::protobuf::int32 indexstart_;
  ::google::protobuf::int32 indexend_;
  friend void  protobuf_AddDesc_model_5fcomm_2eproto();
  friend void protobuf_AssignDesc_model_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_model_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static PkgPageQueryTable1Req* default_instance_;
};
// -------------------------------------------------------------------

class PkgPageQueryTable1Reply : public ::google::protobuf::Message {
 public:
  PkgPageQueryTable1Reply();
  virtual ~PkgPageQueryTable1Reply();

  PkgPageQueryTable1Reply(const PkgPageQueryTable1Reply& from);

  inline PkgPageQueryTable1Reply& operator=(const PkgPageQueryTable1Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgPageQueryTable1Reply& default_instance();

  void Swap(PkgPageQueryTable1Reply* other);

  // implements Message ----------------------------------------------

  inline PkgPageQueryTable1Reply* New() const { return New(NULL); }

  PkgPageQueryTable1Reply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgPageQueryTable1Reply& from);
  void MergeFrom(const PkgPageQueryTable1Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgPageQueryTable1Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // repeated .sample_projectname.db_table1 rows = 10;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 10;
  inline const ::sample_projectname::db_table1& rows(int index) const;
  inline ::sample_projectname::db_table1* mutable_rows(int index);
  inline ::sample_projectname::db_table1* add_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::sample_projectname::db_table1 >&
      rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::sample_projectname::db_table1 >*
      mutable_rows();

  // @@protoc_insertion_point(class_scope:sample_projectname.PkgPageQueryTable1Reply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::RepeatedPtrField< ::sample_projectname::db_table1 > rows_;
  bool issuccess_;
  friend void  protobuf_AddDesc_model_5fcomm_2eproto();
  friend void protobuf_AssignDesc_model_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_model_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static PkgPageQueryTable1Reply* default_instance_;
};
// ===================================================================


// ===================================================================

// PkgUserLoginReq

// required .sample_projectname.EnGetType gettype = 1 [default = GT_PHONE];
inline bool PkgUserLoginReq::has_gettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgUserLoginReq::set_has_gettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgUserLoginReq::clear_has_gettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgUserLoginReq::clear_gettype() {
  gettype_ = 0;
  clear_has_gettype();
}
inline ::sample_projectname::EnGetType PkgUserLoginReq::gettype() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgUserLoginReq.gettype)
  return static_cast< ::sample_projectname::EnGetType >(gettype_);
}
inline void PkgUserLoginReq::set_gettype(::sample_projectname::EnGetType value) {
  assert(::sample_projectname::EnGetType_IsValid(value));
  set_has_gettype();
  gettype_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgUserLoginReq.gettype)
}

// optional int32 userid = 2;
inline bool PkgUserLoginReq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgUserLoginReq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgUserLoginReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgUserLoginReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PkgUserLoginReq::userid() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgUserLoginReq.userid)
  return userid_;
}
inline void PkgUserLoginReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgUserLoginReq.userid)
}

// optional string phonenumber = 3;
inline bool PkgUserLoginReq::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgUserLoginReq::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgUserLoginReq::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgUserLoginReq::clear_phonenumber() {
  phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonenumber();
}
inline const ::std::string& PkgUserLoginReq::phonenumber() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgUserLoginReq.phonenumber)
  return phonenumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_phonenumber(const ::std::string& value) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgUserLoginReq.phonenumber)
}
inline void PkgUserLoginReq::set_phonenumber(const char* value) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgUserLoginReq.phonenumber)
}
inline void PkgUserLoginReq::set_phonenumber(const char* value, size_t size) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgUserLoginReq.phonenumber)
}
inline ::std::string* PkgUserLoginReq::mutable_phonenumber() {
  set_has_phonenumber();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgUserLoginReq.phonenumber)
  return phonenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_phonenumber() {
  clear_has_phonenumber();
  return phonenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber != NULL) {
    set_has_phonenumber();
  } else {
    clear_has_phonenumber();
  }
  phonenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenumber);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgUserLoginReq.phonenumber)
}

// optional string emailaddress = 4;
inline bool PkgUserLoginReq::has_emailaddress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgUserLoginReq::set_has_emailaddress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgUserLoginReq::clear_has_emailaddress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgUserLoginReq::clear_emailaddress() {
  emailaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_emailaddress();
}
inline const ::std::string& PkgUserLoginReq::emailaddress() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgUserLoginReq.emailaddress)
  return emailaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_emailaddress(const ::std::string& value) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgUserLoginReq.emailaddress)
}
inline void PkgUserLoginReq::set_emailaddress(const char* value) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgUserLoginReq.emailaddress)
}
inline void PkgUserLoginReq::set_emailaddress(const char* value, size_t size) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgUserLoginReq.emailaddress)
}
inline ::std::string* PkgUserLoginReq::mutable_emailaddress() {
  set_has_emailaddress();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgUserLoginReq.emailaddress)
  return emailaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_emailaddress() {
  clear_has_emailaddress();
  return emailaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_emailaddress(::std::string* emailaddress) {
  if (emailaddress != NULL) {
    set_has_emailaddress();
  } else {
    clear_has_emailaddress();
  }
  emailaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emailaddress);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgUserLoginReq.emailaddress)
}

// optional string username = 5;
inline bool PkgUserLoginReq::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgUserLoginReq::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgUserLoginReq::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgUserLoginReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& PkgUserLoginReq::username() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgUserLoginReq.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgUserLoginReq.username)
}
inline void PkgUserLoginReq::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgUserLoginReq.username)
}
inline void PkgUserLoginReq::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgUserLoginReq.username)
}
inline ::std::string* PkgUserLoginReq::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgUserLoginReq.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgUserLoginReq.username)
}

// required string password = 10;
inline bool PkgUserLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PkgUserLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PkgUserLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PkgUserLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& PkgUserLoginReq::password() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgUserLoginReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgUserLoginReq.password)
}
inline void PkgUserLoginReq::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgUserLoginReq.password)
}
inline void PkgUserLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgUserLoginReq.password)
}
inline ::std::string* PkgUserLoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgUserLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgUserLoginReq.password)
}

// optional string hashedserversn = 100;
inline bool PkgUserLoginReq::has_hashedserversn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PkgUserLoginReq::set_has_hashedserversn() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PkgUserLoginReq::clear_has_hashedserversn() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PkgUserLoginReq::clear_hashedserversn() {
  hashedserversn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hashedserversn();
}
inline const ::std::string& PkgUserLoginReq::hashedserversn() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgUserLoginReq.hashedserversn)
  return hashedserversn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_hashedserversn(const ::std::string& value) {
  set_has_hashedserversn();
  hashedserversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgUserLoginReq.hashedserversn)
}
inline void PkgUserLoginReq::set_hashedserversn(const char* value) {
  set_has_hashedserversn();
  hashedserversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgUserLoginReq.hashedserversn)
}
inline void PkgUserLoginReq::set_hashedserversn(const char* value, size_t size) {
  set_has_hashedserversn();
  hashedserversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgUserLoginReq.hashedserversn)
}
inline ::std::string* PkgUserLoginReq::mutable_hashedserversn() {
  set_has_hashedserversn();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgUserLoginReq.hashedserversn)
  return hashedserversn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_hashedserversn() {
  clear_has_hashedserversn();
  return hashedserversn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_hashedserversn(::std::string* hashedserversn) {
  if (hashedserversn != NULL) {
    set_has_hashedserversn();
  } else {
    clear_has_hashedserversn();
  }
  hashedserversn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashedserversn);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgUserLoginReq.hashedserversn)
}

// -------------------------------------------------------------------

// PkgUserLoginReply

// required bool issuccess = 1 [default = true];
inline bool PkgUserLoginReply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgUserLoginReply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgUserLoginReply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgUserLoginReply::clear_issuccess() {
  issuccess_ = true;
  clear_has_issuccess();
}
inline bool PkgUserLoginReply::issuccess() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgUserLoginReply.issuccess)
  return issuccess_;
}
inline void PkgUserLoginReply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgUserLoginReply.issuccess)
}

// optional string err = 2;
inline bool PkgUserLoginReply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgUserLoginReply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgUserLoginReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgUserLoginReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgUserLoginReply::err() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgUserLoginReply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgUserLoginReply.err)
}
inline void PkgUserLoginReply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgUserLoginReply.err)
}
inline void PkgUserLoginReply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgUserLoginReply.err)
}
inline ::std::string* PkgUserLoginReply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgUserLoginReply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgUserLoginReply.err)
}

// -------------------------------------------------------------------

// PkgOptTable1Req

// required .sample_projectname.EnOperation opt = 1;
inline bool PkgOptTable1Req::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptTable1Req::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptTable1Req::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptTable1Req::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::sample_projectname::EnOperation PkgOptTable1Req::opt() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable1Req.opt)
  return static_cast< ::sample_projectname::EnOperation >(opt_);
}
inline void PkgOptTable1Req::set_opt(::sample_projectname::EnOperation value) {
  assert(::sample_projectname::EnOperation_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgOptTable1Req.opt)
}

// optional .sample_projectname.db_table1 table1 = 2;
inline bool PkgOptTable1Req::has_table1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptTable1Req::set_has_table1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptTable1Req::clear_has_table1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptTable1Req::clear_table1() {
  if (table1_ != NULL) table1_->::sample_projectname::db_table1::Clear();
  clear_has_table1();
}
inline const ::sample_projectname::db_table1& PkgOptTable1Req::table1() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable1Req.table1)
  return table1_ != NULL ? *table1_ : *default_instance_->table1_;
}
inline ::sample_projectname::db_table1* PkgOptTable1Req::mutable_table1() {
  set_has_table1();
  if (table1_ == NULL) {
    table1_ = new ::sample_projectname::db_table1;
  }
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgOptTable1Req.table1)
  return table1_;
}
inline ::sample_projectname::db_table1* PkgOptTable1Req::release_table1() {
  clear_has_table1();
  ::sample_projectname::db_table1* temp = table1_;
  table1_ = NULL;
  return temp;
}
inline void PkgOptTable1Req::set_allocated_table1(::sample_projectname::db_table1* table1) {
  delete table1_;
  table1_ = table1;
  if (table1) {
    set_has_table1();
  } else {
    clear_has_table1();
  }
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgOptTable1Req.table1)
}

// optional string fieldid = 3;
inline bool PkgOptTable1Req::has_fieldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgOptTable1Req::set_has_fieldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgOptTable1Req::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgOptTable1Req::clear_fieldid() {
  fieldid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fieldid();
}
inline const ::std::string& PkgOptTable1Req::fieldid() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable1Req.fieldid)
  return fieldid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptTable1Req::set_fieldid(const ::std::string& value) {
  set_has_fieldid();
  fieldid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgOptTable1Req.fieldid)
}
inline void PkgOptTable1Req::set_fieldid(const char* value) {
  set_has_fieldid();
  fieldid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgOptTable1Req.fieldid)
}
inline void PkgOptTable1Req::set_fieldid(const char* value, size_t size) {
  set_has_fieldid();
  fieldid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgOptTable1Req.fieldid)
}
inline ::std::string* PkgOptTable1Req::mutable_fieldid() {
  set_has_fieldid();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgOptTable1Req.fieldid)
  return fieldid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptTable1Req::release_fieldid() {
  clear_has_fieldid();
  return fieldid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptTable1Req::set_allocated_fieldid(::std::string* fieldid) {
  if (fieldid != NULL) {
    set_has_fieldid();
  } else {
    clear_has_fieldid();
  }
  fieldid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fieldid);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgOptTable1Req.fieldid)
}

// -------------------------------------------------------------------

// PkgOptTable1Reply

// required bool issuccess = 1;
inline bool PkgOptTable1Reply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptTable1Reply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptTable1Reply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptTable1Reply::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool PkgOptTable1Reply::issuccess() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable1Reply.issuccess)
  return issuccess_;
}
inline void PkgOptTable1Reply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgOptTable1Reply.issuccess)
}

// optional string err = 2;
inline bool PkgOptTable1Reply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptTable1Reply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptTable1Reply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptTable1Reply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgOptTable1Reply::err() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable1Reply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptTable1Reply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgOptTable1Reply.err)
}
inline void PkgOptTable1Reply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgOptTable1Reply.err)
}
inline void PkgOptTable1Reply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgOptTable1Reply.err)
}
inline ::std::string* PkgOptTable1Reply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgOptTable1Reply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptTable1Reply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptTable1Reply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgOptTable1Reply.err)
}

// -------------------------------------------------------------------

// PkgOptTable2Req

// required .sample_projectname.EnOperation opt = 1;
inline bool PkgOptTable2Req::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptTable2Req::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptTable2Req::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptTable2Req::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::sample_projectname::EnOperation PkgOptTable2Req::opt() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable2Req.opt)
  return static_cast< ::sample_projectname::EnOperation >(opt_);
}
inline void PkgOptTable2Req::set_opt(::sample_projectname::EnOperation value) {
  assert(::sample_projectname::EnOperation_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgOptTable2Req.opt)
}

// optional .sample_projectname.db_table1 table2 = 2;
inline bool PkgOptTable2Req::has_table2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptTable2Req::set_has_table2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptTable2Req::clear_has_table2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptTable2Req::clear_table2() {
  if (table2_ != NULL) table2_->::sample_projectname::db_table1::Clear();
  clear_has_table2();
}
inline const ::sample_projectname::db_table1& PkgOptTable2Req::table2() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable2Req.table2)
  return table2_ != NULL ? *table2_ : *default_instance_->table2_;
}
inline ::sample_projectname::db_table1* PkgOptTable2Req::mutable_table2() {
  set_has_table2();
  if (table2_ == NULL) {
    table2_ = new ::sample_projectname::db_table1;
  }
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgOptTable2Req.table2)
  return table2_;
}
inline ::sample_projectname::db_table1* PkgOptTable2Req::release_table2() {
  clear_has_table2();
  ::sample_projectname::db_table1* temp = table2_;
  table2_ = NULL;
  return temp;
}
inline void PkgOptTable2Req::set_allocated_table2(::sample_projectname::db_table1* table2) {
  delete table2_;
  table2_ = table2;
  if (table2) {
    set_has_table2();
  } else {
    clear_has_table2();
  }
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgOptTable2Req.table2)
}

// optional string fieldid = 3;
inline bool PkgOptTable2Req::has_fieldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgOptTable2Req::set_has_fieldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgOptTable2Req::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgOptTable2Req::clear_fieldid() {
  fieldid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fieldid();
}
inline const ::std::string& PkgOptTable2Req::fieldid() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable2Req.fieldid)
  return fieldid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptTable2Req::set_fieldid(const ::std::string& value) {
  set_has_fieldid();
  fieldid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgOptTable2Req.fieldid)
}
inline void PkgOptTable2Req::set_fieldid(const char* value) {
  set_has_fieldid();
  fieldid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgOptTable2Req.fieldid)
}
inline void PkgOptTable2Req::set_fieldid(const char* value, size_t size) {
  set_has_fieldid();
  fieldid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgOptTable2Req.fieldid)
}
inline ::std::string* PkgOptTable2Req::mutable_fieldid() {
  set_has_fieldid();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgOptTable2Req.fieldid)
  return fieldid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptTable2Req::release_fieldid() {
  clear_has_fieldid();
  return fieldid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptTable2Req::set_allocated_fieldid(::std::string* fieldid) {
  if (fieldid != NULL) {
    set_has_fieldid();
  } else {
    clear_has_fieldid();
  }
  fieldid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fieldid);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgOptTable2Req.fieldid)
}

// -------------------------------------------------------------------

// PkgOptTable2Reply

// required bool issuccess = 1;
inline bool PkgOptTable2Reply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptTable2Reply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptTable2Reply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptTable2Reply::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool PkgOptTable2Reply::issuccess() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable2Reply.issuccess)
  return issuccess_;
}
inline void PkgOptTable2Reply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgOptTable2Reply.issuccess)
}

// optional string err = 2;
inline bool PkgOptTable2Reply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptTable2Reply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptTable2Reply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptTable2Reply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgOptTable2Reply::err() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgOptTable2Reply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptTable2Reply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgOptTable2Reply.err)
}
inline void PkgOptTable2Reply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgOptTable2Reply.err)
}
inline void PkgOptTable2Reply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgOptTable2Reply.err)
}
inline ::std::string* PkgOptTable2Reply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgOptTable2Reply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptTable2Reply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptTable2Reply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgOptTable2Reply.err)
}

// -------------------------------------------------------------------

// PkgQueryCondition

// optional string taskdatestart = 2;
inline bool PkgQueryCondition::has_taskdatestart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgQueryCondition::set_has_taskdatestart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgQueryCondition::clear_has_taskdatestart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgQueryCondition::clear_taskdatestart() {
  taskdatestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskdatestart();
}
inline const ::std::string& PkgQueryCondition::taskdatestart() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgQueryCondition.taskdatestart)
  return taskdatestart_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_taskdatestart(const ::std::string& value) {
  set_has_taskdatestart();
  taskdatestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgQueryCondition.taskdatestart)
}
inline void PkgQueryCondition::set_taskdatestart(const char* value) {
  set_has_taskdatestart();
  taskdatestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgQueryCondition.taskdatestart)
}
inline void PkgQueryCondition::set_taskdatestart(const char* value, size_t size) {
  set_has_taskdatestart();
  taskdatestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgQueryCondition.taskdatestart)
}
inline ::std::string* PkgQueryCondition::mutable_taskdatestart() {
  set_has_taskdatestart();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgQueryCondition.taskdatestart)
  return taskdatestart_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_taskdatestart() {
  clear_has_taskdatestart();
  return taskdatestart_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_taskdatestart(::std::string* taskdatestart) {
  if (taskdatestart != NULL) {
    set_has_taskdatestart();
  } else {
    clear_has_taskdatestart();
  }
  taskdatestart_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskdatestart);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgQueryCondition.taskdatestart)
}

// optional string taskdateend = 3;
inline bool PkgQueryCondition::has_taskdateend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgQueryCondition::set_has_taskdateend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgQueryCondition::clear_has_taskdateend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgQueryCondition::clear_taskdateend() {
  taskdateend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskdateend();
}
inline const ::std::string& PkgQueryCondition::taskdateend() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgQueryCondition.taskdateend)
  return taskdateend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_taskdateend(const ::std::string& value) {
  set_has_taskdateend();
  taskdateend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgQueryCondition.taskdateend)
}
inline void PkgQueryCondition::set_taskdateend(const char* value) {
  set_has_taskdateend();
  taskdateend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgQueryCondition.taskdateend)
}
inline void PkgQueryCondition::set_taskdateend(const char* value, size_t size) {
  set_has_taskdateend();
  taskdateend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgQueryCondition.taskdateend)
}
inline ::std::string* PkgQueryCondition::mutable_taskdateend() {
  set_has_taskdateend();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgQueryCondition.taskdateend)
  return taskdateend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_taskdateend() {
  clear_has_taskdateend();
  return taskdateend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_taskdateend(::std::string* taskdateend) {
  if (taskdateend != NULL) {
    set_has_taskdateend();
  } else {
    clear_has_taskdateend();
  }
  taskdateend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskdateend);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgQueryCondition.taskdateend)
}

// optional string keyforname = 4;
inline bool PkgQueryCondition::has_keyforname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgQueryCondition::set_has_keyforname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgQueryCondition::clear_has_keyforname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgQueryCondition::clear_keyforname() {
  keyforname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyforname();
}
inline const ::std::string& PkgQueryCondition::keyforname() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgQueryCondition.keyforname)
  return keyforname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_keyforname(const ::std::string& value) {
  set_has_keyforname();
  keyforname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgQueryCondition.keyforname)
}
inline void PkgQueryCondition::set_keyforname(const char* value) {
  set_has_keyforname();
  keyforname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgQueryCondition.keyforname)
}
inline void PkgQueryCondition::set_keyforname(const char* value, size_t size) {
  set_has_keyforname();
  keyforname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgQueryCondition.keyforname)
}
inline ::std::string* PkgQueryCondition::mutable_keyforname() {
  set_has_keyforname();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgQueryCondition.keyforname)
  return keyforname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_keyforname() {
  clear_has_keyforname();
  return keyforname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_keyforname(::std::string* keyforname) {
  if (keyforname != NULL) {
    set_has_keyforname();
  } else {
    clear_has_keyforname();
  }
  keyforname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyforname);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgQueryCondition.keyforname)
}

// optional string keyforcontent = 5;
inline bool PkgQueryCondition::has_keyforcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgQueryCondition::set_has_keyforcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgQueryCondition::clear_has_keyforcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgQueryCondition::clear_keyforcontent() {
  keyforcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyforcontent();
}
inline const ::std::string& PkgQueryCondition::keyforcontent() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgQueryCondition.keyforcontent)
  return keyforcontent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_keyforcontent(const ::std::string& value) {
  set_has_keyforcontent();
  keyforcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgQueryCondition.keyforcontent)
}
inline void PkgQueryCondition::set_keyforcontent(const char* value) {
  set_has_keyforcontent();
  keyforcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgQueryCondition.keyforcontent)
}
inline void PkgQueryCondition::set_keyforcontent(const char* value, size_t size) {
  set_has_keyforcontent();
  keyforcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgQueryCondition.keyforcontent)
}
inline ::std::string* PkgQueryCondition::mutable_keyforcontent() {
  set_has_keyforcontent();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgQueryCondition.keyforcontent)
  return keyforcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_keyforcontent() {
  clear_has_keyforcontent();
  return keyforcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_keyforcontent(::std::string* keyforcontent) {
  if (keyforcontent != NULL) {
    set_has_keyforcontent();
  } else {
    clear_has_keyforcontent();
  }
  keyforcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyforcontent);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgQueryCondition.keyforcontent)
}

// optional string keyfielduuid = 10;
inline bool PkgQueryCondition::has_keyfielduuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgQueryCondition::set_has_keyfielduuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgQueryCondition::clear_has_keyfielduuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgQueryCondition::clear_keyfielduuid() {
  keyfielduuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyfielduuid();
}
inline const ::std::string& PkgQueryCondition::keyfielduuid() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgQueryCondition.keyfielduuid)
  return keyfielduuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_keyfielduuid(const ::std::string& value) {
  set_has_keyfielduuid();
  keyfielduuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgQueryCondition.keyfielduuid)
}
inline void PkgQueryCondition::set_keyfielduuid(const char* value) {
  set_has_keyfielduuid();
  keyfielduuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgQueryCondition.keyfielduuid)
}
inline void PkgQueryCondition::set_keyfielduuid(const char* value, size_t size) {
  set_has_keyfielduuid();
  keyfielduuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgQueryCondition.keyfielduuid)
}
inline ::std::string* PkgQueryCondition::mutable_keyfielduuid() {
  set_has_keyfielduuid();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgQueryCondition.keyfielduuid)
  return keyfielduuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_keyfielduuid() {
  clear_has_keyfielduuid();
  return keyfielduuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_keyfielduuid(::std::string* keyfielduuid) {
  if (keyfielduuid != NULL) {
    set_has_keyfielduuid();
  } else {
    clear_has_keyfielduuid();
  }
  keyfielduuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyfielduuid);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgQueryCondition.keyfielduuid)
}

// -------------------------------------------------------------------

// PkgPageQueryTable1Req

// optional int32 enconditon = 2 [default = 0];
inline bool PkgPageQueryTable1Req::has_enconditon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgPageQueryTable1Req::set_has_enconditon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgPageQueryTable1Req::clear_has_enconditon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgPageQueryTable1Req::clear_enconditon() {
  enconditon_ = 0;
  clear_has_enconditon();
}
inline ::google::protobuf::int32 PkgPageQueryTable1Req::enconditon() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgPageQueryTable1Req.enconditon)
  return enconditon_;
}
inline void PkgPageQueryTable1Req::set_enconditon(::google::protobuf::int32 value) {
  set_has_enconditon();
  enconditon_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgPageQueryTable1Req.enconditon)
}

// optional .sample_projectname.PkgQueryCondition pkgquerycondition = 3;
inline bool PkgPageQueryTable1Req::has_pkgquerycondition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgPageQueryTable1Req::set_has_pkgquerycondition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgPageQueryTable1Req::clear_has_pkgquerycondition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgPageQueryTable1Req::clear_pkgquerycondition() {
  if (pkgquerycondition_ != NULL) pkgquerycondition_->::sample_projectname::PkgQueryCondition::Clear();
  clear_has_pkgquerycondition();
}
inline const ::sample_projectname::PkgQueryCondition& PkgPageQueryTable1Req::pkgquerycondition() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgPageQueryTable1Req.pkgquerycondition)
  return pkgquerycondition_ != NULL ? *pkgquerycondition_ : *default_instance_->pkgquerycondition_;
}
inline ::sample_projectname::PkgQueryCondition* PkgPageQueryTable1Req::mutable_pkgquerycondition() {
  set_has_pkgquerycondition();
  if (pkgquerycondition_ == NULL) {
    pkgquerycondition_ = new ::sample_projectname::PkgQueryCondition;
  }
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgPageQueryTable1Req.pkgquerycondition)
  return pkgquerycondition_;
}
inline ::sample_projectname::PkgQueryCondition* PkgPageQueryTable1Req::release_pkgquerycondition() {
  clear_has_pkgquerycondition();
  ::sample_projectname::PkgQueryCondition* temp = pkgquerycondition_;
  pkgquerycondition_ = NULL;
  return temp;
}
inline void PkgPageQueryTable1Req::set_allocated_pkgquerycondition(::sample_projectname::PkgQueryCondition* pkgquerycondition) {
  delete pkgquerycondition_;
  pkgquerycondition_ = pkgquerycondition;
  if (pkgquerycondition) {
    set_has_pkgquerycondition();
  } else {
    clear_has_pkgquerycondition();
  }
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgPageQueryTable1Req.pkgquerycondition)
}

// optional .sample_projectname.EnPageFlag pageflag = 4 [default = P_RETURNALL];
inline bool PkgPageQueryTable1Req::has_pageflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgPageQueryTable1Req::set_has_pageflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgPageQueryTable1Req::clear_has_pageflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgPageQueryTable1Req::clear_pageflag() {
  pageflag_ = 2;
  clear_has_pageflag();
}
inline ::sample_projectname::EnPageFlag PkgPageQueryTable1Req::pageflag() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgPageQueryTable1Req.pageflag)
  return static_cast< ::sample_projectname::EnPageFlag >(pageflag_);
}
inline void PkgPageQueryTable1Req::set_pageflag(::sample_projectname::EnPageFlag value) {
  assert(::sample_projectname::EnPageFlag_IsValid(value));
  set_has_pageflag();
  pageflag_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgPageQueryTable1Req.pageflag)
}

// optional int32 indexstart = 5;
inline bool PkgPageQueryTable1Req::has_indexstart() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgPageQueryTable1Req::set_has_indexstart() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgPageQueryTable1Req::clear_has_indexstart() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgPageQueryTable1Req::clear_indexstart() {
  indexstart_ = 0;
  clear_has_indexstart();
}
inline ::google::protobuf::int32 PkgPageQueryTable1Req::indexstart() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgPageQueryTable1Req.indexstart)
  return indexstart_;
}
inline void PkgPageQueryTable1Req::set_indexstart(::google::protobuf::int32 value) {
  set_has_indexstart();
  indexstart_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgPageQueryTable1Req.indexstart)
}

// optional int32 indexend = 6;
inline bool PkgPageQueryTable1Req::has_indexend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgPageQueryTable1Req::set_has_indexend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgPageQueryTable1Req::clear_has_indexend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgPageQueryTable1Req::clear_indexend() {
  indexend_ = 0;
  clear_has_indexend();
}
inline ::google::protobuf::int32 PkgPageQueryTable1Req::indexend() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgPageQueryTable1Req.indexend)
  return indexend_;
}
inline void PkgPageQueryTable1Req::set_indexend(::google::protobuf::int32 value) {
  set_has_indexend();
  indexend_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgPageQueryTable1Req.indexend)
}

// -------------------------------------------------------------------

// PkgPageQueryTable1Reply

// required bool issuccess = 1;
inline bool PkgPageQueryTable1Reply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgPageQueryTable1Reply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgPageQueryTable1Reply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgPageQueryTable1Reply::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool PkgPageQueryTable1Reply::issuccess() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgPageQueryTable1Reply.issuccess)
  return issuccess_;
}
inline void PkgPageQueryTable1Reply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:sample_projectname.PkgPageQueryTable1Reply.issuccess)
}

// optional string err = 2;
inline bool PkgPageQueryTable1Reply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgPageQueryTable1Reply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgPageQueryTable1Reply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgPageQueryTable1Reply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgPageQueryTable1Reply::err() const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgPageQueryTable1Reply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgPageQueryTable1Reply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.PkgPageQueryTable1Reply.err)
}
inline void PkgPageQueryTable1Reply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.PkgPageQueryTable1Reply.err)
}
inline void PkgPageQueryTable1Reply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.PkgPageQueryTable1Reply.err)
}
inline ::std::string* PkgPageQueryTable1Reply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgPageQueryTable1Reply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgPageQueryTable1Reply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgPageQueryTable1Reply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.PkgPageQueryTable1Reply.err)
}

// repeated .sample_projectname.db_table1 rows = 10;
inline int PkgPageQueryTable1Reply::rows_size() const {
  return rows_.size();
}
inline void PkgPageQueryTable1Reply::clear_rows() {
  rows_.Clear();
}
inline const ::sample_projectname::db_table1& PkgPageQueryTable1Reply::rows(int index) const {
  // @@protoc_insertion_point(field_get:sample_projectname.PkgPageQueryTable1Reply.rows)
  return rows_.Get(index);
}
inline ::sample_projectname::db_table1* PkgPageQueryTable1Reply::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:sample_projectname.PkgPageQueryTable1Reply.rows)
  return rows_.Mutable(index);
}
inline ::sample_projectname::db_table1* PkgPageQueryTable1Reply::add_rows() {
  // @@protoc_insertion_point(field_add:sample_projectname.PkgPageQueryTable1Reply.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sample_projectname::db_table1 >&
PkgPageQueryTable1Reply::rows() const {
  // @@protoc_insertion_point(field_list:sample_projectname.PkgPageQueryTable1Reply.rows)
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::sample_projectname::db_table1 >*
PkgPageQueryTable1Reply::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:sample_projectname.PkgPageQueryTable1Reply.rows)
  return &rows_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample_projectname

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sample_projectname::EnGetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sample_projectname::EnGetType>() {
  return ::sample_projectname::EnGetType_descriptor();
}
template <> struct is_proto_enum< ::sample_projectname::EnOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sample_projectname::EnOperation>() {
  return ::sample_projectname::EnOperation_descriptor();
}
template <> struct is_proto_enum< ::sample_projectname::EnQueryCondition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sample_projectname::EnQueryCondition>() {
  return ::sample_projectname::EnQueryCondition_descriptor();
}
template <> struct is_proto_enum< ::sample_projectname::EnPageFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sample_projectname::EnPageFlag>() {
  return ::sample_projectname::EnPageFlag_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_5fcomm_2eproto__INCLUDED
