// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_db.proto

#ifndef PROTOBUF_model_5fdb_2eproto__INCLUDED
#define PROTOBUF_model_5fdb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sample_projectname {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_model_5fdb_2eproto();
void protobuf_AssignDesc_model_5fdb_2eproto();
void protobuf_ShutdownFile_model_5fdb_2eproto();

class db_table1;
class db_table2;
class db_table3;
class db_table4;
class db_table5;

// ===================================================================

class db_table1 : public ::google::protobuf::Message {
 public:
  db_table1();
  virtual ~db_table1();

  db_table1(const db_table1& from);

  inline db_table1& operator=(const db_table1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_table1& default_instance();

  void Swap(db_table1* other);

  // implements Message ----------------------------------------------

  inline db_table1* New() const { return New(NULL); }

  db_table1* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_table1& from);
  void MergeFrom(const db_table1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_table1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field1 = 1;
  inline bool has_field1() const;
  inline void clear_field1();
  static const int kField1FieldNumber = 1;
  inline const ::std::string& field1() const;
  inline void set_field1(const ::std::string& value);
  inline void set_field1(const char* value);
  inline void set_field1(const char* value, size_t size);
  inline ::std::string* mutable_field1();
  inline ::std::string* release_field1();
  inline void set_allocated_field1(::std::string* field1);

  // optional string field2 = 2;
  inline bool has_field2() const;
  inline void clear_field2();
  static const int kField2FieldNumber = 2;
  inline const ::std::string& field2() const;
  inline void set_field2(const ::std::string& value);
  inline void set_field2(const char* value);
  inline void set_field2(const char* value, size_t size);
  inline ::std::string* mutable_field2();
  inline ::std::string* release_field2();
  inline void set_allocated_field2(::std::string* field2);

  // @@protoc_insertion_point(class_scope:sample_projectname.db_table1)
 private:
  inline void set_has_field1();
  inline void clear_has_field1();
  inline void set_has_field2();
  inline void clear_has_field2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr field1_;
  ::google::protobuf::internal::ArenaStringPtr field2_;
  friend void  protobuf_AddDesc_model_5fdb_2eproto();
  friend void protobuf_AssignDesc_model_5fdb_2eproto();
  friend void protobuf_ShutdownFile_model_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_table1* default_instance_;
};
// -------------------------------------------------------------------

class db_table2 : public ::google::protobuf::Message {
 public:
  db_table2();
  virtual ~db_table2();

  db_table2(const db_table2& from);

  inline db_table2& operator=(const db_table2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_table2& default_instance();

  void Swap(db_table2* other);

  // implements Message ----------------------------------------------

  inline db_table2* New() const { return New(NULL); }

  db_table2* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_table2& from);
  void MergeFrom(const db_table2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_table2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field1 = 1;
  inline bool has_field1() const;
  inline void clear_field1();
  static const int kField1FieldNumber = 1;
  inline const ::std::string& field1() const;
  inline void set_field1(const ::std::string& value);
  inline void set_field1(const char* value);
  inline void set_field1(const char* value, size_t size);
  inline ::std::string* mutable_field1();
  inline ::std::string* release_field1();
  inline void set_allocated_field1(::std::string* field1);

  // optional string field2 = 2;
  inline bool has_field2() const;
  inline void clear_field2();
  static const int kField2FieldNumber = 2;
  inline const ::std::string& field2() const;
  inline void set_field2(const ::std::string& value);
  inline void set_field2(const char* value);
  inline void set_field2(const char* value, size_t size);
  inline ::std::string* mutable_field2();
  inline ::std::string* release_field2();
  inline void set_allocated_field2(::std::string* field2);

  // @@protoc_insertion_point(class_scope:sample_projectname.db_table2)
 private:
  inline void set_has_field1();
  inline void clear_has_field1();
  inline void set_has_field2();
  inline void clear_has_field2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr field1_;
  ::google::protobuf::internal::ArenaStringPtr field2_;
  friend void  protobuf_AddDesc_model_5fdb_2eproto();
  friend void protobuf_AssignDesc_model_5fdb_2eproto();
  friend void protobuf_ShutdownFile_model_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_table2* default_instance_;
};
// -------------------------------------------------------------------

class db_table3 : public ::google::protobuf::Message {
 public:
  db_table3();
  virtual ~db_table3();

  db_table3(const db_table3& from);

  inline db_table3& operator=(const db_table3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_table3& default_instance();

  void Swap(db_table3* other);

  // implements Message ----------------------------------------------

  inline db_table3* New() const { return New(NULL); }

  db_table3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_table3& from);
  void MergeFrom(const db_table3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_table3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field1 = 1;
  inline bool has_field1() const;
  inline void clear_field1();
  static const int kField1FieldNumber = 1;
  inline const ::std::string& field1() const;
  inline void set_field1(const ::std::string& value);
  inline void set_field1(const char* value);
  inline void set_field1(const char* value, size_t size);
  inline ::std::string* mutable_field1();
  inline ::std::string* release_field1();
  inline void set_allocated_field1(::std::string* field1);

  // optional string field2 = 2;
  inline bool has_field2() const;
  inline void clear_field2();
  static const int kField2FieldNumber = 2;
  inline const ::std::string& field2() const;
  inline void set_field2(const ::std::string& value);
  inline void set_field2(const char* value);
  inline void set_field2(const char* value, size_t size);
  inline ::std::string* mutable_field2();
  inline ::std::string* release_field2();
  inline void set_allocated_field2(::std::string* field2);

  // optional string field3 = 3;
  inline bool has_field3() const;
  inline void clear_field3();
  static const int kField3FieldNumber = 3;
  inline const ::std::string& field3() const;
  inline void set_field3(const ::std::string& value);
  inline void set_field3(const char* value);
  inline void set_field3(const char* value, size_t size);
  inline ::std::string* mutable_field3();
  inline ::std::string* release_field3();
  inline void set_allocated_field3(::std::string* field3);

  // @@protoc_insertion_point(class_scope:sample_projectname.db_table3)
 private:
  inline void set_has_field1();
  inline void clear_has_field1();
  inline void set_has_field2();
  inline void clear_has_field2();
  inline void set_has_field3();
  inline void clear_has_field3();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr field1_;
  ::google::protobuf::internal::ArenaStringPtr field2_;
  ::google::protobuf::internal::ArenaStringPtr field3_;
  friend void  protobuf_AddDesc_model_5fdb_2eproto();
  friend void protobuf_AssignDesc_model_5fdb_2eproto();
  friend void protobuf_ShutdownFile_model_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_table3* default_instance_;
};
// -------------------------------------------------------------------

class db_table4 : public ::google::protobuf::Message {
 public:
  db_table4();
  virtual ~db_table4();

  db_table4(const db_table4& from);

  inline db_table4& operator=(const db_table4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_table4& default_instance();

  void Swap(db_table4* other);

  // implements Message ----------------------------------------------

  inline db_table4* New() const { return New(NULL); }

  db_table4* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_table4& from);
  void MergeFrom(const db_table4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_table4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field1 = 1;
  inline bool has_field1() const;
  inline void clear_field1();
  static const int kField1FieldNumber = 1;
  inline const ::std::string& field1() const;
  inline void set_field1(const ::std::string& value);
  inline void set_field1(const char* value);
  inline void set_field1(const char* value, size_t size);
  inline ::std::string* mutable_field1();
  inline ::std::string* release_field1();
  inline void set_allocated_field1(::std::string* field1);

  // optional string field2 = 2;
  inline bool has_field2() const;
  inline void clear_field2();
  static const int kField2FieldNumber = 2;
  inline const ::std::string& field2() const;
  inline void set_field2(const ::std::string& value);
  inline void set_field2(const char* value);
  inline void set_field2(const char* value, size_t size);
  inline ::std::string* mutable_field2();
  inline ::std::string* release_field2();
  inline void set_allocated_field2(::std::string* field2);

  // optional string field3 = 3;
  inline bool has_field3() const;
  inline void clear_field3();
  static const int kField3FieldNumber = 3;
  inline const ::std::string& field3() const;
  inline void set_field3(const ::std::string& value);
  inline void set_field3(const char* value);
  inline void set_field3(const char* value, size_t size);
  inline ::std::string* mutable_field3();
  inline ::std::string* release_field3();
  inline void set_allocated_field3(::std::string* field3);

  // optional string field4 = 4;
  inline bool has_field4() const;
  inline void clear_field4();
  static const int kField4FieldNumber = 4;
  inline const ::std::string& field4() const;
  inline void set_field4(const ::std::string& value);
  inline void set_field4(const char* value);
  inline void set_field4(const char* value, size_t size);
  inline ::std::string* mutable_field4();
  inline ::std::string* release_field4();
  inline void set_allocated_field4(::std::string* field4);

  // @@protoc_insertion_point(class_scope:sample_projectname.db_table4)
 private:
  inline void set_has_field1();
  inline void clear_has_field1();
  inline void set_has_field2();
  inline void clear_has_field2();
  inline void set_has_field3();
  inline void clear_has_field3();
  inline void set_has_field4();
  inline void clear_has_field4();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr field1_;
  ::google::protobuf::internal::ArenaStringPtr field2_;
  ::google::protobuf::internal::ArenaStringPtr field3_;
  ::google::protobuf::internal::ArenaStringPtr field4_;
  friend void  protobuf_AddDesc_model_5fdb_2eproto();
  friend void protobuf_AssignDesc_model_5fdb_2eproto();
  friend void protobuf_ShutdownFile_model_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_table4* default_instance_;
};
// -------------------------------------------------------------------

class db_table5 : public ::google::protobuf::Message {
 public:
  db_table5();
  virtual ~db_table5();

  db_table5(const db_table5& from);

  inline db_table5& operator=(const db_table5& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_table5& default_instance();

  void Swap(db_table5* other);

  // implements Message ----------------------------------------------

  inline db_table5* New() const { return New(NULL); }

  db_table5* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_table5& from);
  void MergeFrom(const db_table5& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_table5* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field1 = 1;
  inline bool has_field1() const;
  inline void clear_field1();
  static const int kField1FieldNumber = 1;
  inline const ::std::string& field1() const;
  inline void set_field1(const ::std::string& value);
  inline void set_field1(const char* value);
  inline void set_field1(const char* value, size_t size);
  inline ::std::string* mutable_field1();
  inline ::std::string* release_field1();
  inline void set_allocated_field1(::std::string* field1);

  // optional string field2 = 2;
  inline bool has_field2() const;
  inline void clear_field2();
  static const int kField2FieldNumber = 2;
  inline const ::std::string& field2() const;
  inline void set_field2(const ::std::string& value);
  inline void set_field2(const char* value);
  inline void set_field2(const char* value, size_t size);
  inline ::std::string* mutable_field2();
  inline ::std::string* release_field2();
  inline void set_allocated_field2(::std::string* field2);

  // optional string field3 = 3;
  inline bool has_field3() const;
  inline void clear_field3();
  static const int kField3FieldNumber = 3;
  inline const ::std::string& field3() const;
  inline void set_field3(const ::std::string& value);
  inline void set_field3(const char* value);
  inline void set_field3(const char* value, size_t size);
  inline ::std::string* mutable_field3();
  inline ::std::string* release_field3();
  inline void set_allocated_field3(::std::string* field3);

  // optional string field4 = 4;
  inline bool has_field4() const;
  inline void clear_field4();
  static const int kField4FieldNumber = 4;
  inline const ::std::string& field4() const;
  inline void set_field4(const ::std::string& value);
  inline void set_field4(const char* value);
  inline void set_field4(const char* value, size_t size);
  inline ::std::string* mutable_field4();
  inline ::std::string* release_field4();
  inline void set_allocated_field4(::std::string* field4);

  // optional string field5 = 5;
  inline bool has_field5() const;
  inline void clear_field5();
  static const int kField5FieldNumber = 5;
  inline const ::std::string& field5() const;
  inline void set_field5(const ::std::string& value);
  inline void set_field5(const char* value);
  inline void set_field5(const char* value, size_t size);
  inline ::std::string* mutable_field5();
  inline ::std::string* release_field5();
  inline void set_allocated_field5(::std::string* field5);

  // @@protoc_insertion_point(class_scope:sample_projectname.db_table5)
 private:
  inline void set_has_field1();
  inline void clear_has_field1();
  inline void set_has_field2();
  inline void clear_has_field2();
  inline void set_has_field3();
  inline void clear_has_field3();
  inline void set_has_field4();
  inline void clear_has_field4();
  inline void set_has_field5();
  inline void clear_has_field5();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr field1_;
  ::google::protobuf::internal::ArenaStringPtr field2_;
  ::google::protobuf::internal::ArenaStringPtr field3_;
  ::google::protobuf::internal::ArenaStringPtr field4_;
  ::google::protobuf::internal::ArenaStringPtr field5_;
  friend void  protobuf_AddDesc_model_5fdb_2eproto();
  friend void protobuf_AssignDesc_model_5fdb_2eproto();
  friend void protobuf_ShutdownFile_model_5fdb_2eproto();

  void InitAsDefaultInstance();
  static db_table5* default_instance_;
};
// ===================================================================


// ===================================================================

// db_table1

// optional string field1 = 1;
inline bool db_table1::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_table1::set_has_field1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_table1::clear_has_field1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_table1::clear_field1() {
  field1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field1();
}
inline const ::std::string& db_table1::field1() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table1.field1)
  return field1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table1::set_field1(const ::std::string& value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table1.field1)
}
inline void db_table1::set_field1(const char* value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table1.field1)
}
inline void db_table1::set_field1(const char* value, size_t size) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table1.field1)
}
inline ::std::string* db_table1::mutable_field1() {
  set_has_field1();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table1.field1)
  return field1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table1::release_field1() {
  clear_has_field1();
  return field1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table1::set_allocated_field1(::std::string* field1) {
  if (field1 != NULL) {
    set_has_field1();
  } else {
    clear_has_field1();
  }
  field1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field1);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table1.field1)
}

// optional string field2 = 2;
inline bool db_table1::has_field2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_table1::set_has_field2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_table1::clear_has_field2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_table1::clear_field2() {
  field2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field2();
}
inline const ::std::string& db_table1::field2() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table1.field2)
  return field2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table1::set_field2(const ::std::string& value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table1.field2)
}
inline void db_table1::set_field2(const char* value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table1.field2)
}
inline void db_table1::set_field2(const char* value, size_t size) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table1.field2)
}
inline ::std::string* db_table1::mutable_field2() {
  set_has_field2();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table1.field2)
  return field2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table1::release_field2() {
  clear_has_field2();
  return field2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table1::set_allocated_field2(::std::string* field2) {
  if (field2 != NULL) {
    set_has_field2();
  } else {
    clear_has_field2();
  }
  field2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field2);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table1.field2)
}

// -------------------------------------------------------------------

// db_table2

// optional string field1 = 1;
inline bool db_table2::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_table2::set_has_field1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_table2::clear_has_field1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_table2::clear_field1() {
  field1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field1();
}
inline const ::std::string& db_table2::field1() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table2.field1)
  return field1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table2::set_field1(const ::std::string& value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table2.field1)
}
inline void db_table2::set_field1(const char* value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table2.field1)
}
inline void db_table2::set_field1(const char* value, size_t size) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table2.field1)
}
inline ::std::string* db_table2::mutable_field1() {
  set_has_field1();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table2.field1)
  return field1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table2::release_field1() {
  clear_has_field1();
  return field1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table2::set_allocated_field1(::std::string* field1) {
  if (field1 != NULL) {
    set_has_field1();
  } else {
    clear_has_field1();
  }
  field1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field1);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table2.field1)
}

// optional string field2 = 2;
inline bool db_table2::has_field2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_table2::set_has_field2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_table2::clear_has_field2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_table2::clear_field2() {
  field2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field2();
}
inline const ::std::string& db_table2::field2() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table2.field2)
  return field2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table2::set_field2(const ::std::string& value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table2.field2)
}
inline void db_table2::set_field2(const char* value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table2.field2)
}
inline void db_table2::set_field2(const char* value, size_t size) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table2.field2)
}
inline ::std::string* db_table2::mutable_field2() {
  set_has_field2();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table2.field2)
  return field2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table2::release_field2() {
  clear_has_field2();
  return field2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table2::set_allocated_field2(::std::string* field2) {
  if (field2 != NULL) {
    set_has_field2();
  } else {
    clear_has_field2();
  }
  field2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field2);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table2.field2)
}

// -------------------------------------------------------------------

// db_table3

// optional string field1 = 1;
inline bool db_table3::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_table3::set_has_field1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_table3::clear_has_field1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_table3::clear_field1() {
  field1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field1();
}
inline const ::std::string& db_table3::field1() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table3.field1)
  return field1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table3::set_field1(const ::std::string& value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table3.field1)
}
inline void db_table3::set_field1(const char* value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table3.field1)
}
inline void db_table3::set_field1(const char* value, size_t size) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table3.field1)
}
inline ::std::string* db_table3::mutable_field1() {
  set_has_field1();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table3.field1)
  return field1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table3::release_field1() {
  clear_has_field1();
  return field1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table3::set_allocated_field1(::std::string* field1) {
  if (field1 != NULL) {
    set_has_field1();
  } else {
    clear_has_field1();
  }
  field1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field1);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table3.field1)
}

// optional string field2 = 2;
inline bool db_table3::has_field2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_table3::set_has_field2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_table3::clear_has_field2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_table3::clear_field2() {
  field2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field2();
}
inline const ::std::string& db_table3::field2() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table3.field2)
  return field2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table3::set_field2(const ::std::string& value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table3.field2)
}
inline void db_table3::set_field2(const char* value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table3.field2)
}
inline void db_table3::set_field2(const char* value, size_t size) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table3.field2)
}
inline ::std::string* db_table3::mutable_field2() {
  set_has_field2();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table3.field2)
  return field2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table3::release_field2() {
  clear_has_field2();
  return field2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table3::set_allocated_field2(::std::string* field2) {
  if (field2 != NULL) {
    set_has_field2();
  } else {
    clear_has_field2();
  }
  field2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field2);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table3.field2)
}

// optional string field3 = 3;
inline bool db_table3::has_field3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_table3::set_has_field3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_table3::clear_has_field3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_table3::clear_field3() {
  field3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field3();
}
inline const ::std::string& db_table3::field3() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table3.field3)
  return field3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table3::set_field3(const ::std::string& value) {
  set_has_field3();
  field3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table3.field3)
}
inline void db_table3::set_field3(const char* value) {
  set_has_field3();
  field3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table3.field3)
}
inline void db_table3::set_field3(const char* value, size_t size) {
  set_has_field3();
  field3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table3.field3)
}
inline ::std::string* db_table3::mutable_field3() {
  set_has_field3();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table3.field3)
  return field3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table3::release_field3() {
  clear_has_field3();
  return field3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table3::set_allocated_field3(::std::string* field3) {
  if (field3 != NULL) {
    set_has_field3();
  } else {
    clear_has_field3();
  }
  field3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field3);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table3.field3)
}

// -------------------------------------------------------------------

// db_table4

// optional string field1 = 1;
inline bool db_table4::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_table4::set_has_field1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_table4::clear_has_field1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_table4::clear_field1() {
  field1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field1();
}
inline const ::std::string& db_table4::field1() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table4.field1)
  return field1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table4::set_field1(const ::std::string& value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table4.field1)
}
inline void db_table4::set_field1(const char* value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table4.field1)
}
inline void db_table4::set_field1(const char* value, size_t size) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table4.field1)
}
inline ::std::string* db_table4::mutable_field1() {
  set_has_field1();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table4.field1)
  return field1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table4::release_field1() {
  clear_has_field1();
  return field1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table4::set_allocated_field1(::std::string* field1) {
  if (field1 != NULL) {
    set_has_field1();
  } else {
    clear_has_field1();
  }
  field1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field1);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table4.field1)
}

// optional string field2 = 2;
inline bool db_table4::has_field2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_table4::set_has_field2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_table4::clear_has_field2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_table4::clear_field2() {
  field2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field2();
}
inline const ::std::string& db_table4::field2() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table4.field2)
  return field2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table4::set_field2(const ::std::string& value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table4.field2)
}
inline void db_table4::set_field2(const char* value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table4.field2)
}
inline void db_table4::set_field2(const char* value, size_t size) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table4.field2)
}
inline ::std::string* db_table4::mutable_field2() {
  set_has_field2();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table4.field2)
  return field2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table4::release_field2() {
  clear_has_field2();
  return field2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table4::set_allocated_field2(::std::string* field2) {
  if (field2 != NULL) {
    set_has_field2();
  } else {
    clear_has_field2();
  }
  field2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field2);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table4.field2)
}

// optional string field3 = 3;
inline bool db_table4::has_field3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_table4::set_has_field3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_table4::clear_has_field3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_table4::clear_field3() {
  field3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field3();
}
inline const ::std::string& db_table4::field3() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table4.field3)
  return field3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table4::set_field3(const ::std::string& value) {
  set_has_field3();
  field3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table4.field3)
}
inline void db_table4::set_field3(const char* value) {
  set_has_field3();
  field3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table4.field3)
}
inline void db_table4::set_field3(const char* value, size_t size) {
  set_has_field3();
  field3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table4.field3)
}
inline ::std::string* db_table4::mutable_field3() {
  set_has_field3();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table4.field3)
  return field3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table4::release_field3() {
  clear_has_field3();
  return field3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table4::set_allocated_field3(::std::string* field3) {
  if (field3 != NULL) {
    set_has_field3();
  } else {
    clear_has_field3();
  }
  field3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field3);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table4.field3)
}

// optional string field4 = 4;
inline bool db_table4::has_field4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_table4::set_has_field4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_table4::clear_has_field4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_table4::clear_field4() {
  field4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field4();
}
inline const ::std::string& db_table4::field4() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table4.field4)
  return field4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table4::set_field4(const ::std::string& value) {
  set_has_field4();
  field4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table4.field4)
}
inline void db_table4::set_field4(const char* value) {
  set_has_field4();
  field4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table4.field4)
}
inline void db_table4::set_field4(const char* value, size_t size) {
  set_has_field4();
  field4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table4.field4)
}
inline ::std::string* db_table4::mutable_field4() {
  set_has_field4();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table4.field4)
  return field4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table4::release_field4() {
  clear_has_field4();
  return field4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table4::set_allocated_field4(::std::string* field4) {
  if (field4 != NULL) {
    set_has_field4();
  } else {
    clear_has_field4();
  }
  field4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field4);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table4.field4)
}

// -------------------------------------------------------------------

// db_table5

// optional string field1 = 1;
inline bool db_table5::has_field1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_table5::set_has_field1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_table5::clear_has_field1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_table5::clear_field1() {
  field1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field1();
}
inline const ::std::string& db_table5::field1() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table5.field1)
  return field1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_field1(const ::std::string& value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table5.field1)
}
inline void db_table5::set_field1(const char* value) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table5.field1)
}
inline void db_table5::set_field1(const char* value, size_t size) {
  set_has_field1();
  field1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table5.field1)
}
inline ::std::string* db_table5::mutable_field1() {
  set_has_field1();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table5.field1)
  return field1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table5::release_field1() {
  clear_has_field1();
  return field1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_allocated_field1(::std::string* field1) {
  if (field1 != NULL) {
    set_has_field1();
  } else {
    clear_has_field1();
  }
  field1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field1);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table5.field1)
}

// optional string field2 = 2;
inline bool db_table5::has_field2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_table5::set_has_field2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_table5::clear_has_field2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_table5::clear_field2() {
  field2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field2();
}
inline const ::std::string& db_table5::field2() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table5.field2)
  return field2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_field2(const ::std::string& value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table5.field2)
}
inline void db_table5::set_field2(const char* value) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table5.field2)
}
inline void db_table5::set_field2(const char* value, size_t size) {
  set_has_field2();
  field2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table5.field2)
}
inline ::std::string* db_table5::mutable_field2() {
  set_has_field2();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table5.field2)
  return field2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table5::release_field2() {
  clear_has_field2();
  return field2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_allocated_field2(::std::string* field2) {
  if (field2 != NULL) {
    set_has_field2();
  } else {
    clear_has_field2();
  }
  field2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field2);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table5.field2)
}

// optional string field3 = 3;
inline bool db_table5::has_field3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_table5::set_has_field3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_table5::clear_has_field3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_table5::clear_field3() {
  field3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field3();
}
inline const ::std::string& db_table5::field3() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table5.field3)
  return field3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_field3(const ::std::string& value) {
  set_has_field3();
  field3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table5.field3)
}
inline void db_table5::set_field3(const char* value) {
  set_has_field3();
  field3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table5.field3)
}
inline void db_table5::set_field3(const char* value, size_t size) {
  set_has_field3();
  field3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table5.field3)
}
inline ::std::string* db_table5::mutable_field3() {
  set_has_field3();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table5.field3)
  return field3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table5::release_field3() {
  clear_has_field3();
  return field3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_allocated_field3(::std::string* field3) {
  if (field3 != NULL) {
    set_has_field3();
  } else {
    clear_has_field3();
  }
  field3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field3);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table5.field3)
}

// optional string field4 = 4;
inline bool db_table5::has_field4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_table5::set_has_field4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_table5::clear_has_field4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_table5::clear_field4() {
  field4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field4();
}
inline const ::std::string& db_table5::field4() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table5.field4)
  return field4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_field4(const ::std::string& value) {
  set_has_field4();
  field4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table5.field4)
}
inline void db_table5::set_field4(const char* value) {
  set_has_field4();
  field4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table5.field4)
}
inline void db_table5::set_field4(const char* value, size_t size) {
  set_has_field4();
  field4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table5.field4)
}
inline ::std::string* db_table5::mutable_field4() {
  set_has_field4();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table5.field4)
  return field4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table5::release_field4() {
  clear_has_field4();
  return field4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_allocated_field4(::std::string* field4) {
  if (field4 != NULL) {
    set_has_field4();
  } else {
    clear_has_field4();
  }
  field4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field4);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table5.field4)
}

// optional string field5 = 5;
inline bool db_table5::has_field5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_table5::set_has_field5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_table5::clear_has_field5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_table5::clear_field5() {
  field5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field5();
}
inline const ::std::string& db_table5::field5() const {
  // @@protoc_insertion_point(field_get:sample_projectname.db_table5.field5)
  return field5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_field5(const ::std::string& value) {
  set_has_field5();
  field5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample_projectname.db_table5.field5)
}
inline void db_table5::set_field5(const char* value) {
  set_has_field5();
  field5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample_projectname.db_table5.field5)
}
inline void db_table5::set_field5(const char* value, size_t size) {
  set_has_field5();
  field5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample_projectname.db_table5.field5)
}
inline ::std::string* db_table5::mutable_field5() {
  set_has_field5();
  // @@protoc_insertion_point(field_mutable:sample_projectname.db_table5.field5)
  return field5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_table5::release_field5() {
  clear_has_field5();
  return field5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_table5::set_allocated_field5(::std::string* field5) {
  if (field5 != NULL) {
    set_has_field5();
  } else {
    clear_has_field5();
  }
  field5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field5);
  // @@protoc_insertion_point(field_set_allocated:sample_projectname.db_table5.field5)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample_projectname

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_5fdb_2eproto__INCLUDED
