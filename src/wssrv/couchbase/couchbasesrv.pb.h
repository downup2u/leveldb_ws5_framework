// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: couchbasesrv.proto

#ifndef PROTOBUF_couchbasesrv_2eproto__INCLUDED
#define PROTOBUF_couchbasesrv_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace couchbasesrv {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_couchbasesrv_2eproto();
void protobuf_AssignDesc_couchbasesrv_2eproto();
void protobuf_ShutdownFile_couchbasesrv_2eproto();

class DBOperationReq;
class DBOperationReply;

enum DBOperationReq_EnLcb_storage_t {
  DBOperationReq_EnLcb_storage_t_LCB_ADD = 1,
  DBOperationReq_EnLcb_storage_t_LCB_REPLACE = 2,
  DBOperationReq_EnLcb_storage_t_LCB_SET = 3,
  DBOperationReq_EnLcb_storage_t_LCB_APPEND = 4,
  DBOperationReq_EnLcb_storage_t_LCB_PREPEND = 5
};
bool DBOperationReq_EnLcb_storage_t_IsValid(int value);
const DBOperationReq_EnLcb_storage_t DBOperationReq_EnLcb_storage_t_EnLcb_storage_t_MIN = DBOperationReq_EnLcb_storage_t_LCB_ADD;
const DBOperationReq_EnLcb_storage_t DBOperationReq_EnLcb_storage_t_EnLcb_storage_t_MAX = DBOperationReq_EnLcb_storage_t_LCB_PREPEND;
const int DBOperationReq_EnLcb_storage_t_EnLcb_storage_t_ARRAYSIZE = DBOperationReq_EnLcb_storage_t_EnLcb_storage_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DBOperationReq_EnLcb_storage_t_descriptor();
inline const ::std::string& DBOperationReq_EnLcb_storage_t_Name(DBOperationReq_EnLcb_storage_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DBOperationReq_EnLcb_storage_t_descriptor(), value);
}
inline bool DBOperationReq_EnLcb_storage_t_Parse(
    const ::std::string& name, DBOperationReq_EnLcb_storage_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DBOperationReq_EnLcb_storage_t>(
    DBOperationReq_EnLcb_storage_t_descriptor(), name, value);
}
enum DBOperationReq_EnHttp_mothod {
  DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_GET = 0,
  DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_POST = 1,
  DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_PUT = 2,
  DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_DELETE = 3,
  DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_MAX = 4
};
bool DBOperationReq_EnHttp_mothod_IsValid(int value);
const DBOperationReq_EnHttp_mothod DBOperationReq_EnHttp_mothod_EnHttp_mothod_MIN = DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_GET;
const DBOperationReq_EnHttp_mothod DBOperationReq_EnHttp_mothod_EnHttp_mothod_MAX = DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_MAX;
const int DBOperationReq_EnHttp_mothod_EnHttp_mothod_ARRAYSIZE = DBOperationReq_EnHttp_mothod_EnHttp_mothod_MAX + 1;

const ::google::protobuf::EnumDescriptor* DBOperationReq_EnHttp_mothod_descriptor();
inline const ::std::string& DBOperationReq_EnHttp_mothod_Name(DBOperationReq_EnHttp_mothod value) {
  return ::google::protobuf::internal::NameOfEnum(
    DBOperationReq_EnHttp_mothod_descriptor(), value);
}
inline bool DBOperationReq_EnHttp_mothod_Parse(
    const ::std::string& name, DBOperationReq_EnHttp_mothod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DBOperationReq_EnHttp_mothod>(
    DBOperationReq_EnHttp_mothod_descriptor(), name, value);
}
enum DBOperationReq_EnReq_type {
  DBOperationReq_EnReq_type_LCB_HTTP_TYPE_VIEW = 0,
  DBOperationReq_EnReq_type_LCB_HTTP_TYPE_MANAGEMENT = 1,
  DBOperationReq_EnReq_type_LCB_HTTP_TYPE_RAW = 2,
  DBOperationReq_EnReq_type_LCB_HTTP_TYPE_MAX = 3
};
bool DBOperationReq_EnReq_type_IsValid(int value);
const DBOperationReq_EnReq_type DBOperationReq_EnReq_type_EnReq_type_MIN = DBOperationReq_EnReq_type_LCB_HTTP_TYPE_VIEW;
const DBOperationReq_EnReq_type DBOperationReq_EnReq_type_EnReq_type_MAX = DBOperationReq_EnReq_type_LCB_HTTP_TYPE_MAX;
const int DBOperationReq_EnReq_type_EnReq_type_ARRAYSIZE = DBOperationReq_EnReq_type_EnReq_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DBOperationReq_EnReq_type_descriptor();
inline const ::std::string& DBOperationReq_EnReq_type_Name(DBOperationReq_EnReq_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DBOperationReq_EnReq_type_descriptor(), value);
}
inline bool DBOperationReq_EnReq_type_Parse(
    const ::std::string& name, DBOperationReq_EnReq_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DBOperationReq_EnReq_type>(
    DBOperationReq_EnReq_type_descriptor(), name, value);
}
enum EnLcbOperation {
  lcb_store = 1,
  lcb_get = 2,
  lcb_remove = 3,
  lcb_httprequest = 4,
  lcb_userdefine = 100
};
bool EnLcbOperation_IsValid(int value);
const EnLcbOperation EnLcbOperation_MIN = lcb_store;
const EnLcbOperation EnLcbOperation_MAX = lcb_userdefine;
const int EnLcbOperation_ARRAYSIZE = EnLcbOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnLcbOperation_descriptor();
inline const ::std::string& EnLcbOperation_Name(EnLcbOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnLcbOperation_descriptor(), value);
}
inline bool EnLcbOperation_Parse(
    const ::std::string& name, EnLcbOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnLcbOperation>(
    EnLcbOperation_descriptor(), name, value);
}
// ===================================================================

class DBOperationReq : public ::google::protobuf::Message {
 public:
  DBOperationReq();
  virtual ~DBOperationReq();

  DBOperationReq(const DBOperationReq& from);

  inline DBOperationReq& operator=(const DBOperationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBOperationReq& default_instance();

  void Swap(DBOperationReq* other);

  // implements Message ----------------------------------------------

  inline DBOperationReq* New() const { return New(NULL); }

  DBOperationReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBOperationReq& from);
  void MergeFrom(const DBOperationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBOperationReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DBOperationReq_EnLcb_storage_t EnLcb_storage_t;
  static const EnLcb_storage_t LCB_ADD = DBOperationReq_EnLcb_storage_t_LCB_ADD;
  static const EnLcb_storage_t LCB_REPLACE = DBOperationReq_EnLcb_storage_t_LCB_REPLACE;
  static const EnLcb_storage_t LCB_SET = DBOperationReq_EnLcb_storage_t_LCB_SET;
  static const EnLcb_storage_t LCB_APPEND = DBOperationReq_EnLcb_storage_t_LCB_APPEND;
  static const EnLcb_storage_t LCB_PREPEND = DBOperationReq_EnLcb_storage_t_LCB_PREPEND;
  static inline bool EnLcb_storage_t_IsValid(int value) {
    return DBOperationReq_EnLcb_storage_t_IsValid(value);
  }
  static const EnLcb_storage_t EnLcb_storage_t_MIN =
    DBOperationReq_EnLcb_storage_t_EnLcb_storage_t_MIN;
  static const EnLcb_storage_t EnLcb_storage_t_MAX =
    DBOperationReq_EnLcb_storage_t_EnLcb_storage_t_MAX;
  static const int EnLcb_storage_t_ARRAYSIZE =
    DBOperationReq_EnLcb_storage_t_EnLcb_storage_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EnLcb_storage_t_descriptor() {
    return DBOperationReq_EnLcb_storage_t_descriptor();
  }
  static inline const ::std::string& EnLcb_storage_t_Name(EnLcb_storage_t value) {
    return DBOperationReq_EnLcb_storage_t_Name(value);
  }
  static inline bool EnLcb_storage_t_Parse(const ::std::string& name,
      EnLcb_storage_t* value) {
    return DBOperationReq_EnLcb_storage_t_Parse(name, value);
  }

  typedef DBOperationReq_EnHttp_mothod EnHttp_mothod;
  static const EnHttp_mothod LCB_HTTP_METHOD_GET = DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_GET;
  static const EnHttp_mothod LCB_HTTP_METHOD_POST = DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_POST;
  static const EnHttp_mothod LCB_HTTP_METHOD_PUT = DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_PUT;
  static const EnHttp_mothod LCB_HTTP_METHOD_DELETE = DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_DELETE;
  static const EnHttp_mothod LCB_HTTP_METHOD_MAX = DBOperationReq_EnHttp_mothod_LCB_HTTP_METHOD_MAX;
  static inline bool EnHttp_mothod_IsValid(int value) {
    return DBOperationReq_EnHttp_mothod_IsValid(value);
  }
  static const EnHttp_mothod EnHttp_mothod_MIN =
    DBOperationReq_EnHttp_mothod_EnHttp_mothod_MIN;
  static const EnHttp_mothod EnHttp_mothod_MAX =
    DBOperationReq_EnHttp_mothod_EnHttp_mothod_MAX;
  static const int EnHttp_mothod_ARRAYSIZE =
    DBOperationReq_EnHttp_mothod_EnHttp_mothod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EnHttp_mothod_descriptor() {
    return DBOperationReq_EnHttp_mothod_descriptor();
  }
  static inline const ::std::string& EnHttp_mothod_Name(EnHttp_mothod value) {
    return DBOperationReq_EnHttp_mothod_Name(value);
  }
  static inline bool EnHttp_mothod_Parse(const ::std::string& name,
      EnHttp_mothod* value) {
    return DBOperationReq_EnHttp_mothod_Parse(name, value);
  }

  typedef DBOperationReq_EnReq_type EnReq_type;
  static const EnReq_type LCB_HTTP_TYPE_VIEW = DBOperationReq_EnReq_type_LCB_HTTP_TYPE_VIEW;
  static const EnReq_type LCB_HTTP_TYPE_MANAGEMENT = DBOperationReq_EnReq_type_LCB_HTTP_TYPE_MANAGEMENT;
  static const EnReq_type LCB_HTTP_TYPE_RAW = DBOperationReq_EnReq_type_LCB_HTTP_TYPE_RAW;
  static const EnReq_type LCB_HTTP_TYPE_MAX = DBOperationReq_EnReq_type_LCB_HTTP_TYPE_MAX;
  static inline bool EnReq_type_IsValid(int value) {
    return DBOperationReq_EnReq_type_IsValid(value);
  }
  static const EnReq_type EnReq_type_MIN =
    DBOperationReq_EnReq_type_EnReq_type_MIN;
  static const EnReq_type EnReq_type_MAX =
    DBOperationReq_EnReq_type_EnReq_type_MAX;
  static const int EnReq_type_ARRAYSIZE =
    DBOperationReq_EnReq_type_EnReq_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EnReq_type_descriptor() {
    return DBOperationReq_EnReq_type_descriptor();
  }
  static inline const ::std::string& EnReq_type_Name(EnReq_type value) {
    return DBOperationReq_EnReq_type_Name(value);
  }
  static inline bool EnReq_type_Parse(const ::std::string& name,
      EnReq_type* value) {
    return DBOperationReq_EnReq_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
  inline bool has_enlcboperation() const;
  inline void clear_enlcboperation();
  static const int kEnlcboperationFieldNumber = 1;
  inline ::couchbasesrv::EnLcbOperation enlcboperation() const;
  inline void set_enlcboperation(::couchbasesrv::EnLcbOperation value);

  // optional string dockey = 11;
  inline bool has_dockey() const;
  inline void clear_dockey();
  static const int kDockeyFieldNumber = 11;
  inline const ::std::string& dockey() const;
  inline void set_dockey(const ::std::string& value);
  inline void set_dockey(const char* value);
  inline void set_dockey(const char* value, size_t size);
  inline ::std::string* mutable_dockey();
  inline ::std::string* release_dockey();
  inline void set_allocated_dockey(::std::string* dockey);

  // optional string doctxt = 12;
  inline bool has_doctxt() const;
  inline void clear_doctxt();
  static const int kDoctxtFieldNumber = 12;
  inline const ::std::string& doctxt() const;
  inline void set_doctxt(const ::std::string& value);
  inline void set_doctxt(const char* value);
  inline void set_doctxt(const char* value, size_t size);
  inline ::std::string* mutable_doctxt();
  inline ::std::string* release_doctxt();
  inline void set_allocated_doctxt(::std::string* doctxt);

  // optional .couchbasesrv.DBOperationReq.EnLcb_storage_t enlcbstorecmd = 13;
  inline bool has_enlcbstorecmd() const;
  inline void clear_enlcbstorecmd();
  static const int kEnlcbstorecmdFieldNumber = 13;
  inline ::couchbasesrv::DBOperationReq_EnLcb_storage_t enlcbstorecmd() const;
  inline void set_enlcbstorecmd(::couchbasesrv::DBOperationReq_EnLcb_storage_t value);

  // optional string path = 21;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 21;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string body = 22;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 22;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional string contenttype = 23;
  inline bool has_contenttype() const;
  inline void clear_contenttype();
  static const int kContenttypeFieldNumber = 23;
  inline const ::std::string& contenttype() const;
  inline void set_contenttype(const ::std::string& value);
  inline void set_contenttype(const char* value);
  inline void set_contenttype(const char* value, size_t size);
  inline ::std::string* mutable_contenttype();
  inline ::std::string* release_contenttype();
  inline void set_allocated_contenttype(::std::string* contenttype);

  // optional .couchbasesrv.DBOperationReq.EnHttp_mothod enhttpmethod = 24;
  inline bool has_enhttpmethod() const;
  inline void clear_enhttpmethod();
  static const int kEnhttpmethodFieldNumber = 24;
  inline ::couchbasesrv::DBOperationReq_EnHttp_mothod enhttpmethod() const;
  inline void set_enhttpmethod(::couchbasesrv::DBOperationReq_EnHttp_mothod value);

  // optional .couchbasesrv.DBOperationReq.EnReq_type enreqtype = 25;
  inline bool has_enreqtype() const;
  inline void clear_enreqtype();
  static const int kEnreqtypeFieldNumber = 25;
  inline ::couchbasesrv::DBOperationReq_EnReq_type enreqtype() const;
  inline void set_enreqtype(::couchbasesrv::DBOperationReq_EnReq_type value);

  // optional string uuidstring = 100;
  inline bool has_uuidstring() const;
  inline void clear_uuidstring();
  static const int kUuidstringFieldNumber = 100;
  inline const ::std::string& uuidstring() const;
  inline void set_uuidstring(const ::std::string& value);
  inline void set_uuidstring(const char* value);
  inline void set_uuidstring(const char* value, size_t size);
  inline ::std::string* mutable_uuidstring();
  inline ::std::string* release_uuidstring();
  inline void set_allocated_uuidstring(::std::string* uuidstring);

  // @@protoc_insertion_point(class_scope:couchbasesrv.DBOperationReq)
 private:
  inline void set_has_enlcboperation();
  inline void clear_has_enlcboperation();
  inline void set_has_dockey();
  inline void clear_has_dockey();
  inline void set_has_doctxt();
  inline void clear_has_doctxt();
  inline void set_has_enlcbstorecmd();
  inline void clear_has_enlcbstorecmd();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_contenttype();
  inline void clear_has_contenttype();
  inline void set_has_enhttpmethod();
  inline void clear_has_enhttpmethod();
  inline void set_has_enreqtype();
  inline void clear_has_enreqtype();
  inline void set_has_uuidstring();
  inline void clear_has_uuidstring();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dockey_;
  int enlcboperation_;
  int enlcbstorecmd_;
  ::google::protobuf::internal::ArenaStringPtr doctxt_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr contenttype_;
  int enhttpmethod_;
  int enreqtype_;
  ::google::protobuf::internal::ArenaStringPtr uuidstring_;
  friend void  protobuf_AddDesc_couchbasesrv_2eproto();
  friend void protobuf_AssignDesc_couchbasesrv_2eproto();
  friend void protobuf_ShutdownFile_couchbasesrv_2eproto();

  void InitAsDefaultInstance();
  static DBOperationReq* default_instance_;
};
// -------------------------------------------------------------------

class DBOperationReply : public ::google::protobuf::Message {
 public:
  DBOperationReply();
  virtual ~DBOperationReply();

  DBOperationReply(const DBOperationReply& from);

  inline DBOperationReply& operator=(const DBOperationReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBOperationReply& default_instance();

  void Swap(DBOperationReply* other);

  // implements Message ----------------------------------------------

  inline DBOperationReply* New() const { return New(NULL); }

  DBOperationReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBOperationReply& from);
  void MergeFrom(const DBOperationReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBOperationReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
  inline bool has_enlcboperation() const;
  inline void clear_enlcboperation();
  static const int kEnlcboperationFieldNumber = 1;
  inline ::couchbasesrv::EnLcbOperation enlcboperation() const;
  inline void set_enlcboperation(::couchbasesrv::EnLcbOperation value);

  // optional bool issuc = 2;
  inline bool has_issuc() const;
  inline void clear_issuc();
  static const int kIssucFieldNumber = 2;
  inline bool issuc() const;
  inline void set_issuc(bool value);

  // optional string err = 3;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 3;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // optional string errdesc = 4;
  inline bool has_errdesc() const;
  inline void clear_errdesc();
  static const int kErrdescFieldNumber = 4;
  inline const ::std::string& errdesc() const;
  inline void set_errdesc(const ::std::string& value);
  inline void set_errdesc(const char* value);
  inline void set_errdesc(const char* value, size_t size);
  inline ::std::string* mutable_errdesc();
  inline ::std::string* release_errdesc();
  inline void set_allocated_errdesc(::std::string* errdesc);

  // optional string dockey = 11;
  inline bool has_dockey() const;
  inline void clear_dockey();
  static const int kDockeyFieldNumber = 11;
  inline const ::std::string& dockey() const;
  inline void set_dockey(const ::std::string& value);
  inline void set_dockey(const char* value);
  inline void set_dockey(const char* value, size_t size);
  inline ::std::string* mutable_dockey();
  inline ::std::string* release_dockey();
  inline void set_allocated_dockey(::std::string* dockey);

  // optional string doctxt = 12;
  inline bool has_doctxt() const;
  inline void clear_doctxt();
  static const int kDoctxtFieldNumber = 12;
  inline const ::std::string& doctxt() const;
  inline void set_doctxt(const ::std::string& value);
  inline void set_doctxt(const char* value);
  inline void set_doctxt(const char* value, size_t size);
  inline ::std::string* mutable_doctxt();
  inline ::std::string* release_doctxt();
  inline void set_allocated_doctxt(::std::string* doctxt);

  // optional string httppath = 21;
  inline bool has_httppath() const;
  inline void clear_httppath();
  static const int kHttppathFieldNumber = 21;
  inline const ::std::string& httppath() const;
  inline void set_httppath(const ::std::string& value);
  inline void set_httppath(const char* value);
  inline void set_httppath(const char* value, size_t size);
  inline ::std::string* mutable_httppath();
  inline ::std::string* release_httppath();
  inline void set_allocated_httppath(::std::string* httppath);

  // optional string httpheaders = 22;
  inline bool has_httpheaders() const;
  inline void clear_httpheaders();
  static const int kHttpheadersFieldNumber = 22;
  inline const ::std::string& httpheaders() const;
  inline void set_httpheaders(const ::std::string& value);
  inline void set_httpheaders(const char* value);
  inline void set_httpheaders(const char* value, size_t size);
  inline ::std::string* mutable_httpheaders();
  inline ::std::string* release_httpheaders();
  inline void set_allocated_httpheaders(::std::string* httpheaders);

  // optional string httpjsonresult = 23;
  inline bool has_httpjsonresult() const;
  inline void clear_httpjsonresult();
  static const int kHttpjsonresultFieldNumber = 23;
  inline const ::std::string& httpjsonresult() const;
  inline void set_httpjsonresult(const ::std::string& value);
  inline void set_httpjsonresult(const char* value);
  inline void set_httpjsonresult(const char* value, size_t size);
  inline ::std::string* mutable_httpjsonresult();
  inline ::std::string* release_httpjsonresult();
  inline void set_allocated_httpjsonresult(::std::string* httpjsonresult);

  // optional string uuidstring = 100;
  inline bool has_uuidstring() const;
  inline void clear_uuidstring();
  static const int kUuidstringFieldNumber = 100;
  inline const ::std::string& uuidstring() const;
  inline void set_uuidstring(const ::std::string& value);
  inline void set_uuidstring(const char* value);
  inline void set_uuidstring(const char* value, size_t size);
  inline ::std::string* mutable_uuidstring();
  inline ::std::string* release_uuidstring();
  inline void set_allocated_uuidstring(::std::string* uuidstring);

  // @@protoc_insertion_point(class_scope:couchbasesrv.DBOperationReply)
 private:
  inline void set_has_enlcboperation();
  inline void clear_has_enlcboperation();
  inline void set_has_issuc();
  inline void clear_has_issuc();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_errdesc();
  inline void clear_has_errdesc();
  inline void set_has_dockey();
  inline void clear_has_dockey();
  inline void set_has_doctxt();
  inline void clear_has_doctxt();
  inline void set_has_httppath();
  inline void clear_has_httppath();
  inline void set_has_httpheaders();
  inline void clear_has_httpheaders();
  inline void set_has_httpjsonresult();
  inline void clear_has_httpjsonresult();
  inline void set_has_uuidstring();
  inline void clear_has_uuidstring();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int enlcboperation_;
  bool issuc_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::internal::ArenaStringPtr errdesc_;
  ::google::protobuf::internal::ArenaStringPtr dockey_;
  ::google::protobuf::internal::ArenaStringPtr doctxt_;
  ::google::protobuf::internal::ArenaStringPtr httppath_;
  ::google::protobuf::internal::ArenaStringPtr httpheaders_;
  ::google::protobuf::internal::ArenaStringPtr httpjsonresult_;
  ::google::protobuf::internal::ArenaStringPtr uuidstring_;
  friend void  protobuf_AddDesc_couchbasesrv_2eproto();
  friend void protobuf_AssignDesc_couchbasesrv_2eproto();
  friend void protobuf_ShutdownFile_couchbasesrv_2eproto();

  void InitAsDefaultInstance();
  static DBOperationReply* default_instance_;
};
// ===================================================================


// ===================================================================

// DBOperationReq

// optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
inline bool DBOperationReq::has_enlcboperation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBOperationReq::set_has_enlcboperation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBOperationReq::clear_has_enlcboperation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBOperationReq::clear_enlcboperation() {
  enlcboperation_ = 1;
  clear_has_enlcboperation();
}
inline ::couchbasesrv::EnLcbOperation DBOperationReq::enlcboperation() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.enlcboperation)
  return static_cast< ::couchbasesrv::EnLcbOperation >(enlcboperation_);
}
inline void DBOperationReq::set_enlcboperation(::couchbasesrv::EnLcbOperation value) {
  assert(::couchbasesrv::EnLcbOperation_IsValid(value));
  set_has_enlcboperation();
  enlcboperation_ = value;
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.enlcboperation)
}

// optional string dockey = 11;
inline bool DBOperationReq::has_dockey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBOperationReq::set_has_dockey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBOperationReq::clear_has_dockey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBOperationReq::clear_dockey() {
  dockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dockey();
}
inline const ::std::string& DBOperationReq::dockey() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.dockey)
  return dockey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_dockey(const ::std::string& value) {
  set_has_dockey();
  dockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.dockey)
}
inline void DBOperationReq::set_dockey(const char* value) {
  set_has_dockey();
  dockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReq.dockey)
}
inline void DBOperationReq::set_dockey(const char* value, size_t size) {
  set_has_dockey();
  dockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReq.dockey)
}
inline ::std::string* DBOperationReq::mutable_dockey() {
  set_has_dockey();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReq.dockey)
  return dockey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReq::release_dockey() {
  clear_has_dockey();
  return dockey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_allocated_dockey(::std::string* dockey) {
  if (dockey != NULL) {
    set_has_dockey();
  } else {
    clear_has_dockey();
  }
  dockey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dockey);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReq.dockey)
}

// optional string doctxt = 12;
inline bool DBOperationReq::has_doctxt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBOperationReq::set_has_doctxt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBOperationReq::clear_has_doctxt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBOperationReq::clear_doctxt() {
  doctxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doctxt();
}
inline const ::std::string& DBOperationReq::doctxt() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.doctxt)
  return doctxt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_doctxt(const ::std::string& value) {
  set_has_doctxt();
  doctxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.doctxt)
}
inline void DBOperationReq::set_doctxt(const char* value) {
  set_has_doctxt();
  doctxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReq.doctxt)
}
inline void DBOperationReq::set_doctxt(const char* value, size_t size) {
  set_has_doctxt();
  doctxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReq.doctxt)
}
inline ::std::string* DBOperationReq::mutable_doctxt() {
  set_has_doctxt();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReq.doctxt)
  return doctxt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReq::release_doctxt() {
  clear_has_doctxt();
  return doctxt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_allocated_doctxt(::std::string* doctxt) {
  if (doctxt != NULL) {
    set_has_doctxt();
  } else {
    clear_has_doctxt();
  }
  doctxt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doctxt);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReq.doctxt)
}

// optional .couchbasesrv.DBOperationReq.EnLcb_storage_t enlcbstorecmd = 13;
inline bool DBOperationReq::has_enlcbstorecmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBOperationReq::set_has_enlcbstorecmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBOperationReq::clear_has_enlcbstorecmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBOperationReq::clear_enlcbstorecmd() {
  enlcbstorecmd_ = 1;
  clear_has_enlcbstorecmd();
}
inline ::couchbasesrv::DBOperationReq_EnLcb_storage_t DBOperationReq::enlcbstorecmd() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.enlcbstorecmd)
  return static_cast< ::couchbasesrv::DBOperationReq_EnLcb_storage_t >(enlcbstorecmd_);
}
inline void DBOperationReq::set_enlcbstorecmd(::couchbasesrv::DBOperationReq_EnLcb_storage_t value) {
  assert(::couchbasesrv::DBOperationReq_EnLcb_storage_t_IsValid(value));
  set_has_enlcbstorecmd();
  enlcbstorecmd_ = value;
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.enlcbstorecmd)
}

// optional string path = 21;
inline bool DBOperationReq::has_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBOperationReq::set_has_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBOperationReq::clear_has_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBOperationReq::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& DBOperationReq::path() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.path)
}
inline void DBOperationReq::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReq.path)
}
inline void DBOperationReq::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReq.path)
}
inline ::std::string* DBOperationReq::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReq.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReq::release_path() {
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReq.path)
}

// optional string body = 22;
inline bool DBOperationReq::has_body() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBOperationReq::set_has_body() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBOperationReq::clear_has_body() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBOperationReq::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& DBOperationReq::body() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.body)
}
inline void DBOperationReq::set_body(const char* value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReq.body)
}
inline void DBOperationReq::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReq.body)
}
inline ::std::string* DBOperationReq::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReq.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReq::release_body() {
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReq.body)
}

// optional string contenttype = 23;
inline bool DBOperationReq::has_contenttype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DBOperationReq::set_has_contenttype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DBOperationReq::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DBOperationReq::clear_contenttype() {
  contenttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contenttype();
}
inline const ::std::string& DBOperationReq::contenttype() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.contenttype)
  return contenttype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_contenttype(const ::std::string& value) {
  set_has_contenttype();
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.contenttype)
}
inline void DBOperationReq::set_contenttype(const char* value) {
  set_has_contenttype();
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReq.contenttype)
}
inline void DBOperationReq::set_contenttype(const char* value, size_t size) {
  set_has_contenttype();
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReq.contenttype)
}
inline ::std::string* DBOperationReq::mutable_contenttype() {
  set_has_contenttype();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReq.contenttype)
  return contenttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReq::release_contenttype() {
  clear_has_contenttype();
  return contenttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype != NULL) {
    set_has_contenttype();
  } else {
    clear_has_contenttype();
  }
  contenttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contenttype);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReq.contenttype)
}

// optional .couchbasesrv.DBOperationReq.EnHttp_mothod enhttpmethod = 24;
inline bool DBOperationReq::has_enhttpmethod() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DBOperationReq::set_has_enhttpmethod() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DBOperationReq::clear_has_enhttpmethod() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DBOperationReq::clear_enhttpmethod() {
  enhttpmethod_ = 0;
  clear_has_enhttpmethod();
}
inline ::couchbasesrv::DBOperationReq_EnHttp_mothod DBOperationReq::enhttpmethod() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.enhttpmethod)
  return static_cast< ::couchbasesrv::DBOperationReq_EnHttp_mothod >(enhttpmethod_);
}
inline void DBOperationReq::set_enhttpmethod(::couchbasesrv::DBOperationReq_EnHttp_mothod value) {
  assert(::couchbasesrv::DBOperationReq_EnHttp_mothod_IsValid(value));
  set_has_enhttpmethod();
  enhttpmethod_ = value;
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.enhttpmethod)
}

// optional .couchbasesrv.DBOperationReq.EnReq_type enreqtype = 25;
inline bool DBOperationReq::has_enreqtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DBOperationReq::set_has_enreqtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DBOperationReq::clear_has_enreqtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DBOperationReq::clear_enreqtype() {
  enreqtype_ = 0;
  clear_has_enreqtype();
}
inline ::couchbasesrv::DBOperationReq_EnReq_type DBOperationReq::enreqtype() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.enreqtype)
  return static_cast< ::couchbasesrv::DBOperationReq_EnReq_type >(enreqtype_);
}
inline void DBOperationReq::set_enreqtype(::couchbasesrv::DBOperationReq_EnReq_type value) {
  assert(::couchbasesrv::DBOperationReq_EnReq_type_IsValid(value));
  set_has_enreqtype();
  enreqtype_ = value;
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.enreqtype)
}

// optional string uuidstring = 100;
inline bool DBOperationReq::has_uuidstring() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DBOperationReq::set_has_uuidstring() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DBOperationReq::clear_has_uuidstring() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DBOperationReq::clear_uuidstring() {
  uuidstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidstring();
}
inline const ::std::string& DBOperationReq::uuidstring() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReq.uuidstring)
  return uuidstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_uuidstring(const ::std::string& value) {
  set_has_uuidstring();
  uuidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReq.uuidstring)
}
inline void DBOperationReq::set_uuidstring(const char* value) {
  set_has_uuidstring();
  uuidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReq.uuidstring)
}
inline void DBOperationReq::set_uuidstring(const char* value, size_t size) {
  set_has_uuidstring();
  uuidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReq.uuidstring)
}
inline ::std::string* DBOperationReq::mutable_uuidstring() {
  set_has_uuidstring();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReq.uuidstring)
  return uuidstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReq::release_uuidstring() {
  clear_has_uuidstring();
  return uuidstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReq::set_allocated_uuidstring(::std::string* uuidstring) {
  if (uuidstring != NULL) {
    set_has_uuidstring();
  } else {
    clear_has_uuidstring();
  }
  uuidstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidstring);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReq.uuidstring)
}

// -------------------------------------------------------------------

// DBOperationReply

// optional .couchbasesrv.EnLcbOperation enlcboperation = 1;
inline bool DBOperationReply::has_enlcboperation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBOperationReply::set_has_enlcboperation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBOperationReply::clear_has_enlcboperation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBOperationReply::clear_enlcboperation() {
  enlcboperation_ = 1;
  clear_has_enlcboperation();
}
inline ::couchbasesrv::EnLcbOperation DBOperationReply::enlcboperation() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.enlcboperation)
  return static_cast< ::couchbasesrv::EnLcbOperation >(enlcboperation_);
}
inline void DBOperationReply::set_enlcboperation(::couchbasesrv::EnLcbOperation value) {
  assert(::couchbasesrv::EnLcbOperation_IsValid(value));
  set_has_enlcboperation();
  enlcboperation_ = value;
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.enlcboperation)
}

// optional bool issuc = 2;
inline bool DBOperationReply::has_issuc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBOperationReply::set_has_issuc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBOperationReply::clear_has_issuc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBOperationReply::clear_issuc() {
  issuc_ = false;
  clear_has_issuc();
}
inline bool DBOperationReply::issuc() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.issuc)
  return issuc_;
}
inline void DBOperationReply::set_issuc(bool value) {
  set_has_issuc();
  issuc_ = value;
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.issuc)
}

// optional string err = 3;
inline bool DBOperationReply::has_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBOperationReply::set_has_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBOperationReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBOperationReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& DBOperationReply::err() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.err)
}
inline void DBOperationReply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReply.err)
}
inline void DBOperationReply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReply.err)
}
inline ::std::string* DBOperationReply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReply.err)
}

// optional string errdesc = 4;
inline bool DBOperationReply::has_errdesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBOperationReply::set_has_errdesc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBOperationReply::clear_has_errdesc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBOperationReply::clear_errdesc() {
  errdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errdesc();
}
inline const ::std::string& DBOperationReply::errdesc() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.errdesc)
  return errdesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_errdesc(const ::std::string& value) {
  set_has_errdesc();
  errdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.errdesc)
}
inline void DBOperationReply::set_errdesc(const char* value) {
  set_has_errdesc();
  errdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReply.errdesc)
}
inline void DBOperationReply::set_errdesc(const char* value, size_t size) {
  set_has_errdesc();
  errdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReply.errdesc)
}
inline ::std::string* DBOperationReply::mutable_errdesc() {
  set_has_errdesc();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReply.errdesc)
  return errdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReply::release_errdesc() {
  clear_has_errdesc();
  return errdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_allocated_errdesc(::std::string* errdesc) {
  if (errdesc != NULL) {
    set_has_errdesc();
  } else {
    clear_has_errdesc();
  }
  errdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errdesc);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReply.errdesc)
}

// optional string dockey = 11;
inline bool DBOperationReply::has_dockey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBOperationReply::set_has_dockey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBOperationReply::clear_has_dockey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBOperationReply::clear_dockey() {
  dockey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dockey();
}
inline const ::std::string& DBOperationReply::dockey() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.dockey)
  return dockey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_dockey(const ::std::string& value) {
  set_has_dockey();
  dockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.dockey)
}
inline void DBOperationReply::set_dockey(const char* value) {
  set_has_dockey();
  dockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReply.dockey)
}
inline void DBOperationReply::set_dockey(const char* value, size_t size) {
  set_has_dockey();
  dockey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReply.dockey)
}
inline ::std::string* DBOperationReply::mutable_dockey() {
  set_has_dockey();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReply.dockey)
  return dockey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReply::release_dockey() {
  clear_has_dockey();
  return dockey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_allocated_dockey(::std::string* dockey) {
  if (dockey != NULL) {
    set_has_dockey();
  } else {
    clear_has_dockey();
  }
  dockey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dockey);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReply.dockey)
}

// optional string doctxt = 12;
inline bool DBOperationReply::has_doctxt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBOperationReply::set_has_doctxt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBOperationReply::clear_has_doctxt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBOperationReply::clear_doctxt() {
  doctxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doctxt();
}
inline const ::std::string& DBOperationReply::doctxt() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.doctxt)
  return doctxt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_doctxt(const ::std::string& value) {
  set_has_doctxt();
  doctxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.doctxt)
}
inline void DBOperationReply::set_doctxt(const char* value) {
  set_has_doctxt();
  doctxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReply.doctxt)
}
inline void DBOperationReply::set_doctxt(const char* value, size_t size) {
  set_has_doctxt();
  doctxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReply.doctxt)
}
inline ::std::string* DBOperationReply::mutable_doctxt() {
  set_has_doctxt();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReply.doctxt)
  return doctxt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReply::release_doctxt() {
  clear_has_doctxt();
  return doctxt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_allocated_doctxt(::std::string* doctxt) {
  if (doctxt != NULL) {
    set_has_doctxt();
  } else {
    clear_has_doctxt();
  }
  doctxt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doctxt);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReply.doctxt)
}

// optional string httppath = 21;
inline bool DBOperationReply::has_httppath() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DBOperationReply::set_has_httppath() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DBOperationReply::clear_has_httppath() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DBOperationReply::clear_httppath() {
  httppath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_httppath();
}
inline const ::std::string& DBOperationReply::httppath() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.httppath)
  return httppath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_httppath(const ::std::string& value) {
  set_has_httppath();
  httppath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.httppath)
}
inline void DBOperationReply::set_httppath(const char* value) {
  set_has_httppath();
  httppath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReply.httppath)
}
inline void DBOperationReply::set_httppath(const char* value, size_t size) {
  set_has_httppath();
  httppath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReply.httppath)
}
inline ::std::string* DBOperationReply::mutable_httppath() {
  set_has_httppath();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReply.httppath)
  return httppath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReply::release_httppath() {
  clear_has_httppath();
  return httppath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_allocated_httppath(::std::string* httppath) {
  if (httppath != NULL) {
    set_has_httppath();
  } else {
    clear_has_httppath();
  }
  httppath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), httppath);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReply.httppath)
}

// optional string httpheaders = 22;
inline bool DBOperationReply::has_httpheaders() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DBOperationReply::set_has_httpheaders() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DBOperationReply::clear_has_httpheaders() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DBOperationReply::clear_httpheaders() {
  httpheaders_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_httpheaders();
}
inline const ::std::string& DBOperationReply::httpheaders() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.httpheaders)
  return httpheaders_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_httpheaders(const ::std::string& value) {
  set_has_httpheaders();
  httpheaders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.httpheaders)
}
inline void DBOperationReply::set_httpheaders(const char* value) {
  set_has_httpheaders();
  httpheaders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReply.httpheaders)
}
inline void DBOperationReply::set_httpheaders(const char* value, size_t size) {
  set_has_httpheaders();
  httpheaders_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReply.httpheaders)
}
inline ::std::string* DBOperationReply::mutable_httpheaders() {
  set_has_httpheaders();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReply.httpheaders)
  return httpheaders_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReply::release_httpheaders() {
  clear_has_httpheaders();
  return httpheaders_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_allocated_httpheaders(::std::string* httpheaders) {
  if (httpheaders != NULL) {
    set_has_httpheaders();
  } else {
    clear_has_httpheaders();
  }
  httpheaders_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), httpheaders);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReply.httpheaders)
}

// optional string httpjsonresult = 23;
inline bool DBOperationReply::has_httpjsonresult() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DBOperationReply::set_has_httpjsonresult() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DBOperationReply::clear_has_httpjsonresult() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DBOperationReply::clear_httpjsonresult() {
  httpjsonresult_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_httpjsonresult();
}
inline const ::std::string& DBOperationReply::httpjsonresult() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.httpjsonresult)
  return httpjsonresult_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_httpjsonresult(const ::std::string& value) {
  set_has_httpjsonresult();
  httpjsonresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.httpjsonresult)
}
inline void DBOperationReply::set_httpjsonresult(const char* value) {
  set_has_httpjsonresult();
  httpjsonresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReply.httpjsonresult)
}
inline void DBOperationReply::set_httpjsonresult(const char* value, size_t size) {
  set_has_httpjsonresult();
  httpjsonresult_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReply.httpjsonresult)
}
inline ::std::string* DBOperationReply::mutable_httpjsonresult() {
  set_has_httpjsonresult();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReply.httpjsonresult)
  return httpjsonresult_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReply::release_httpjsonresult() {
  clear_has_httpjsonresult();
  return httpjsonresult_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_allocated_httpjsonresult(::std::string* httpjsonresult) {
  if (httpjsonresult != NULL) {
    set_has_httpjsonresult();
  } else {
    clear_has_httpjsonresult();
  }
  httpjsonresult_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), httpjsonresult);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReply.httpjsonresult)
}

// optional string uuidstring = 100;
inline bool DBOperationReply::has_uuidstring() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DBOperationReply::set_has_uuidstring() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DBOperationReply::clear_has_uuidstring() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DBOperationReply::clear_uuidstring() {
  uuidstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidstring();
}
inline const ::std::string& DBOperationReply::uuidstring() const {
  // @@protoc_insertion_point(field_get:couchbasesrv.DBOperationReply.uuidstring)
  return uuidstring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_uuidstring(const ::std::string& value) {
  set_has_uuidstring();
  uuidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:couchbasesrv.DBOperationReply.uuidstring)
}
inline void DBOperationReply::set_uuidstring(const char* value) {
  set_has_uuidstring();
  uuidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:couchbasesrv.DBOperationReply.uuidstring)
}
inline void DBOperationReply::set_uuidstring(const char* value, size_t size) {
  set_has_uuidstring();
  uuidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:couchbasesrv.DBOperationReply.uuidstring)
}
inline ::std::string* DBOperationReply::mutable_uuidstring() {
  set_has_uuidstring();
  // @@protoc_insertion_point(field_mutable:couchbasesrv.DBOperationReply.uuidstring)
  return uuidstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBOperationReply::release_uuidstring() {
  clear_has_uuidstring();
  return uuidstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBOperationReply::set_allocated_uuidstring(::std::string* uuidstring) {
  if (uuidstring != NULL) {
    set_has_uuidstring();
  } else {
    clear_has_uuidstring();
  }
  uuidstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidstring);
  // @@protoc_insertion_point(field_set_allocated:couchbasesrv.DBOperationReply.uuidstring)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace couchbasesrv

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::couchbasesrv::DBOperationReq_EnLcb_storage_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::couchbasesrv::DBOperationReq_EnLcb_storage_t>() {
  return ::couchbasesrv::DBOperationReq_EnLcb_storage_t_descriptor();
}
template <> struct is_proto_enum< ::couchbasesrv::DBOperationReq_EnHttp_mothod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::couchbasesrv::DBOperationReq_EnHttp_mothod>() {
  return ::couchbasesrv::DBOperationReq_EnHttp_mothod_descriptor();
}
template <> struct is_proto_enum< ::couchbasesrv::DBOperationReq_EnReq_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::couchbasesrv::DBOperationReq_EnReq_type>() {
  return ::couchbasesrv::DBOperationReq_EnReq_type_descriptor();
}
template <> struct is_proto_enum< ::couchbasesrv::EnLcbOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::couchbasesrv::EnLcbOperation>() {
  return ::couchbasesrv::EnLcbOperation_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_couchbasesrv_2eproto__INCLUDED
